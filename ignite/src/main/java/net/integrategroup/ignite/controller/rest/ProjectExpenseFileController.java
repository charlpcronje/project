package net.integrategroup.ignite.controller.rest;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.integrategroup.ignite.persistence.model.ProjectExpenseFile;
import net.integrategroup.ignite.persistence.service.DatabaseService;
import net.integrategroup.ignite.persistence.service.ProjectExpenseFileService;
import net.integrategroup.ignite.utils.MapUtils;
import net.integrategroup.ignite.utils.SecurityUtils;



/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-11-28 15:14:11 ******** ***** **/


@RestController
@RequestMapping("/rest/ignite/v1/project-expense-file")

public class ProjectExpenseFileController {

	@Autowired
	ProjectExpenseFileService projectExpenseFileService;

	@Autowired
	SecurityUtils securityUtils;

	@Autowired
	DatabaseService databaseService;

	@GetMapping("/find-all")          //All records in the ProjectExpenseFile Table
	public ResponseEntity<?> findAll() {
		try {
			List<ProjectExpenseFile> result = projectExpenseFileService.findAll();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/by-project-expense-file-id/{projectExpenseFileId}")   //Find the record by the PrimaryKey
	public ResponseEntity<?> getByProjectExpenseFileId(@PathVariable("projectExpenseFileId") Long projectExpenseFileId) {
		try {
			ProjectExpenseFile result = projectExpenseFileService.getByProjectExpenseFileId(projectExpenseFileId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping()       //Save (update)
	public ResponseEntity<?> saveProjectExpenseFile(@RequestBody ProjectExpenseFile projectExpenseFile) {
		try {
			ProjectExpenseFile test = projectExpenseFileService.getByProjectExpenseFileId(projectExpenseFile.getProjectExpenseFileId());
			if (test == null) {
				throw new Exception("ProjectExpenseFile not found");
			}
			projectExpenseFile = projectExpenseFileService.save(projectExpenseFile);
			return ResponseEntity.ok(projectExpenseFile);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping("/new")   //Save (new)
	public ResponseEntity<?> saveProjectExpenseFileNew(@RequestBody ProjectExpenseFile projectExpenseFile) {
		try {
			ProjectExpenseFile test = projectExpenseFileService.getByProjectExpenseFileId(projectExpenseFile.getProjectExpenseFileId());
			if (test != null) {
				throw new Exception("The ProjectExpenseFile already exists");
			}
			projectExpenseFile = projectExpenseFileService.save(projectExpenseFile);
			return ResponseEntity.ok(projectExpenseFile);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-view-project-expense-file-id/{projectExpenseFileId}")   //One record from View
//	public ResponseEntity<?> getByVProjectExpenseFileId(@PathVariable("projectExpenseFileId") Long projectExpenseFileId) {
//		try {
//			VProjectExpenseFile result = projectExpenseFileService.getByVProjectExpenseFileId(projectExpenseFileId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}


	@PostMapping("/delete")   //Delete a record, and insert into AuditTrial table
	public ResponseEntity<?> deleteProjectExpenseFile(@RequestBody Map<String, Object> data) {

		MapUtils mu = new MapUtils();

		Long projectExpenseFileId = mu.getAsLongOrNull(data, "projectExpenseFileId");
		String sql = "CALL ig_db.deleteProjectExpenseFile(?);";

		String exampleSql = "CALL ig_db.deleteProjectExpenseFile(" + projectExpenseFileId+ "');";

		System.out.println("\n\n\n" + exampleSql + "\n\n\n"); // Prints out, but does not execute, for debugging
		
		try {	//**//					
			Object[] params = {		
				projectExpenseFileId	
			};						
			databaseService.executeStoredProc(sql, params);
			return ResponseEntity.ok().build();
			//**//
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/find-all-in-view")                                            //All in view
//	public ResponseEntity<?> findListAllInView()  {
//		try {
//			List<VProjectExpenseFile> result = projectExpenseFileService.findListAllInView();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-project-expense-file-for-XXX")                                       //Find List from View without parameter
//	public ResponseEntity<?> findListProjectExpenseFileForXXX()  {
//		try {
//			List<VProjectExpenseFile> result = projectExpenseFileService.findListVProjectExpenseFileForXXX();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-project-expense-file-for-XXX/{paramName}")                           //Find List from View that needs parameter
//	public ResponseEntity<?> findListProjectExpenseFileForXXX(@PathVariable("paramName") String paramName,	ModelMap modelMap)  {
//		try {
//			List<VProjectExpenseFile> result = projectExpenseFileService.findListVProjectExpenseFileForXXX(paramName);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-project-expense-file-for-XXX/{paramId}/{paramName}/{paramName2}")   //Find List from View that needs multiple parameters
//	public ResponseEntity<?> findListVProjectExpenseFileForXXX(@PathVariable("paramId") Long paramId,
//		                                        @PathVariable("paramName") Long paramName,
//		                                        @PathVariable("paramName") Long paramName) {
//		try {
//			List<VProjectExpenseFile> result = projectExpenseFileService.findListVProjectExpenseFileForXXX(paramId, paramName, paramName2);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-project-expense-file-for-XXX/{paramId}/{firstDay}/{lastDay}")   //Find List from View that needs date parameters   (use variable like this:  var dateParam = getMsFromDatePicker("theStartDate");)
//	public ResponseEntity<?> findListProjectExpenseFileForXXX(ModelMap modelMap, 
//		                                        @PathVariable("paramId") Long paramId,
//		                                        @PathVariable(name = "firstDay") Long firstDay,
//		                                        @PathVariable(name = "lastDay") Long lastDay) {
//		try {
//			Date fd = new Date(firstDay);     // Dates sent to db
//			Date ld = new Date(lastDay);
//			List<VProjectExpenseFile> result = projectExpenseFileService.findListVProjectExpenseFileForXXX(paramId, fd, ld);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}



	@GetMapping("/list-project-expense-id/{projectExpenseId}")              //Find list of ProjectExpenseFiles for a specific ProjectExpenseId
	public ResponseEntity<?> findListProjectExpenseFileForProjectExpenseId(@PathVariable("projectExpenseId") Long projectExpenseId, ModelMap modelMap) {
		try {
			List<ProjectExpenseFile> result = projectExpenseFileService.findListProjectExpenseFileForProjectExpenseId(projectExpenseId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}



}