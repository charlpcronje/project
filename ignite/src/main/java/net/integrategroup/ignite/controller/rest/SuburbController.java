package net.integrategroup.ignite.controller.rest;

import java.sql.CallableStatement;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.integrategroup.ignite.persistence.model.Suburb;
import net.integrategroup.ignite.persistence.model.VSuburb;
import net.integrategroup.ignite.persistence.model.VSuburbMin;
import net.integrategroup.ignite.persistence.service.DatabaseService;
import net.integrategroup.ignite.persistence.service.SuburbService;
import net.integrategroup.ignite.utils.MapUtils;
import net.integrategroup.ignite.utils.SecurityUtils;



/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-10 10:46:17 ******** ***** **/


@RestController
@RequestMapping("/rest/ignite/v1/suburb")

public class SuburbController {

	@Autowired
	SuburbService suburbService;

	@Autowired
	SecurityUtils securityUtils;

	@Autowired
	DatabaseService databaseService;

	@GetMapping("/find-all")          //All records in the Suburb Table
	public ResponseEntity<?> findAll() {
		try {
			List<Suburb> result = suburbService.findAll();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/by-suburb-id/{suburbId}")   //Find the record by the PrimaryKey
	public ResponseEntity<?> getBySuburbId(@PathVariable("suburbId") Long suburbId) {
		try {
			Suburb result = suburbService.getBySuburbId(suburbId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping()       //Save (update)
	public ResponseEntity<?> saveSuburb(@RequestBody Suburb suburb) {
		try {
			Suburb test = suburbService.getBySuburbId(suburb.getSuburbId());
			if (test == null) {
				throw new Exception("Suburb not found");
			}
			suburb = suburbService.save(suburb);
			return ResponseEntity.ok(suburb);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping("/new")   //Save (new)
	public ResponseEntity<?> saveSuburbNew(@RequestBody Suburb suburb) {
		try {
			Suburb test = suburbService.getBySuburbId(suburb.getSuburbId());
			if (test != null) {
				throw new Exception("The Suburb already exists");
			}
			suburb = suburbService.save(suburb);
			return ResponseEntity.ok(suburb);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-view-suburb-id/{suburbId}")   //One record from View
//	public ResponseEntity<?> getByVSuburbId(@PathVariable("suburbId") Long suburbId) {
//		try {
//			VSuburb result = suburbService.getByVSuburbId(suburbId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}



	@GetMapping("/find-all-in-view")                                            //All in view
	public ResponseEntity<?> findListAllInView()  {
		try {
			List<VSuburb> result = suburbService.findListAllInView();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/list-view-suburb-for-XXX")                                       //Find List from View without parameter
//	public ResponseEntity<?> findListSuburbForXXX()  {
//		try {
//			List<VSuburb> result = suburbService.findListVSuburbForXXX();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

	@GetMapping("/list-view-suburb-for-city-min/{cityId}")                           //Find List from Min View that needs parameter
	public ResponseEntity<?> findListVSuburbMinForCity(@PathVariable("cityId") Long cityId,	ModelMap modelMap)  {
		try {
			List<VSuburbMin> result = suburbService.findListVSuburbMinForCity(cityId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/list-view-suburb-for-XXX/{paramId}/{paramName}/{paramName2}")   //Find List from View that needs multiple parameters
//	public ResponseEntity<?> findListVSuburbForXXX(@PathVariable("paramId") Long paramId,
//		                                        @PathVariable("paramName") Long paramName,
//		                                        @PathVariable("paramName") Long paramName) {
//		try {
//			List<VSuburb> result = suburbService.findListVSuburbForXXX(paramId, paramName, paramName2);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-suburb-for-XXX/{paramId}/{firstDay}/{lastDay}")   //Find List from View that needs date parameters   (use variable like this:  var dateParam = getMsFromDatePicker("theStartDate");)
//	public ResponseEntity<?> findListSuburbForXXX(ModelMap modelMap,
//		                                        @PathVariable("paramId") Long paramId,
//		                                        @PathVariable(name = "firstDay") Long firstDay,
//		                                        @PathVariable(name = "lastDay") Long lastDay) {
//		try {
//			Date fd = new Date(firstDay);     // Dates sent to db
//			Date ld = new Date(lastDay);
//			List<VSuburb> result = suburbService.findListVSuburbForXXX(paramId, fd, ld);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}



	@GetMapping("/list-city-id/{cityId}")              //Find list of Suburbs for a specific CityId
	public ResponseEntity<?> findListSuburbForCityId(@PathVariable("cityId") Long cityId, ModelMap modelMap) {
		try {
			List<VSuburb> result = suburbService.findListSuburbForCityId(cityId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}



}