package net.integrategroup.ignite.controller.rest;

import java.sql.CallableStatement;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.integrategroup.ignite.persistence.model.TypicalFolderStructure;
import net.integrategroup.ignite.persistence.model.VTfsTree;
import net.integrategroup.ignite.persistence.model.VTypicalFolderStructure;
import net.integrategroup.ignite.persistence.service.DatabaseService;
import net.integrategroup.ignite.persistence.service.TypicalFolderStructureService;
import net.integrategroup.ignite.utils.MapUtils;
import net.integrategroup.ignite.utils.SecurityUtils;



/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-11-01 10:26:07 ******** ***** **/


@RestController
@RequestMapping("/rest/ignite/v1/typical-folder-structure")

public class TypicalFolderStructureController {

	@Autowired
	TypicalFolderStructureService typicalFolderStructureService;

	@Autowired
	SecurityUtils securityUtils;

	@Autowired
	DatabaseService databaseService;

	@GetMapping("/find-all")          //All records in the TypicalFolderStructure Table
	public ResponseEntity<?> findAll() {
		try {
			List<TypicalFolderStructure> result = typicalFolderStructureService.findAll();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/by-typical-folder-structure-id/{typicalFolderStructureId}")   //Find the record by the PrimaryKey
	public ResponseEntity<?> getByTypicalFolderStructureId(@PathVariable("typicalFolderStructureId") Long typicalFolderStructureId) {
		try {
			TypicalFolderStructure result = typicalFolderStructureService.getByTypicalFolderStructureId(typicalFolderStructureId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping()       //Save (update)
	public ResponseEntity<?> saveTypicalFolderStructure(@RequestBody TypicalFolderStructure typicalFolderStructure) {
		try {
			TypicalFolderStructure test = typicalFolderStructureService.getByTypicalFolderStructureId(typicalFolderStructure.getTypicalFolderStructureId());
			if (test == null) {
				throw new Exception("TypicalFolderStructure not found");
			}
			typicalFolderStructure = typicalFolderStructureService.save(typicalFolderStructure);
			return ResponseEntity.ok(typicalFolderStructure);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping("/new")   //Save (new)
	public ResponseEntity<?> saveTypicalFolderStructureNew(@RequestBody TypicalFolderStructure typicalFolderStructure) {
		try {
			TypicalFolderStructure test = typicalFolderStructureService.getByTypicalFolderStructureId(typicalFolderStructure.getTypicalFolderStructureId());
			if (test != null) {
				throw new Exception("The TypicalFolderStructure already exists");
			}
			typicalFolderStructure = typicalFolderStructureService.save(typicalFolderStructure);
			return ResponseEntity.ok(typicalFolderStructure);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-view-typical-folder-structure-id/{typicalFolderStructureId}")   //One record from View
//	public ResponseEntity<?> getByVTypicalFolderStructureId(@PathVariable("typicalFolderStructureId") Long typicalFolderStructureId) {
//		try {
//			VTypicalFolderStructure result = typicalFolderStructureService.getByVTypicalFolderStructureId(typicalFolderStructureId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	} 


	@PostMapping("/delete")   //Delete a record, and insert into AuditTrial table
	public ResponseEntity<?> deleteTypicalFolderStructure(@RequestBody Map<String, Object> data) {

		MapUtils mu = new MapUtils();

		Long typicalFolderStructureId = mu.getAsLongOrNull(data, "typicalFolderStructureId");
		String sql = "CALL ig_db.deleteTypicalFolderStructure(?, ?);";

		String exampleSql = "CALL ig_db.deleteTypicalFolderStructure(" + typicalFolderStructureId + ");";
		System.out.println("\n\n\n" + exampleSql + "\n\n\n"); // Prints out, but does not execute, for debugging

		try {	//**//					
			Object[] params = {		
				typicalFolderStructureId	
			};						
			
			databaseService.executeStoredProc(sql, params);
			return ResponseEntity.ok().build();
			//**//
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	
	@GetMapping("/find-all-in-tree-view")                                       //All in tree view
	public ResponseEntity<?> findListAllInTreeView()  {
		try {
			List<VTfsTree> result = typicalFolderStructureService.findListAllInTreeView();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
	
	@GetMapping("/find-top-level-in-tree-view")                                 //Top Level in tree view
	public ResponseEntity<?> findListTopLevelInTreeView()  {
		try {
			List<VTfsTree> result = typicalFolderStructureService.findListTopLevelInTreeView();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}	
	
	@GetMapping("/find-all-in-view")                                            //All in view
	public ResponseEntity<?> findListAllInView()  {
		try {
			List<VTypicalFolderStructure> result = typicalFolderStructureService.findListAllInView();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
	
	

//	@GetMapping("/list-view-typical-folder-structure-for-XXX")                                       //Find List from View without parameter
//	public ResponseEntity<?> findListTypicalFolderStructureForXXX()  {
//		try {
//			List<VTypicalFolderStructure> result = typicalFolderStructureService.findListVTypicalFolderStructureForXXX();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-typical-folder-structure-for-XXX/{paramName}")                           //Find List from View that needs parameter
//	public ResponseEntity<?> findListTypicalFolderStructureForXXX(@PathVariable("paramName") String paramName,	ModelMap modelMap)  {
//		try {
//			List<VTypicalFolderStructure> result = typicalFolderStructureService.findListVTypicalFolderStructureForXXX(paramName);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-typical-folder-structure-for-XXX/{paramId}/{paramName}/{paramName2}")   //Find List from View that needs multiple parameters
//	public ResponseEntity<?> findListVTypicalFolderStructureForXXX(@PathVariable("paramId") Long paramId,
//		                                        @PathVariable("paramName") Long paramName,
//		                                        @PathVariable("paramName") Long paramName) {
//		try {
//			List<VTypicalFolderStructure> result = typicalFolderStructureService.findListVTypicalFolderStructureForXXX(paramId, paramName, paramName2);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-typical-folder-structure-for-XXX/{paramId}/{firstDay}/{lastDay}")   //Find List from View that needs date parameters   (use variable like this:  var dateParam = getMsFromDatePicker("theStartDate");)
//	public ResponseEntity<?> findListTypicalFolderStructureForXXX(ModelMap modelMap, 
//		                                        @PathVariable("paramId") Long paramId,
//		                                        @PathVariable(name = "firstDay") Long firstDay,
//		                                        @PathVariable(name = "lastDay") Long lastDay) {
//		try {
//			Date fd = new Date(firstDay);     // Dates sent to db
//			Date ld = new Date(lastDay);
//			List<VTypicalFolderStructure> result = typicalFolderStructureService.findListVTypicalFolderStructureForXXX(paramId, fd, ld);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}



	@GetMapping("/list-service-discipline-id-industry/{serviceDisciplineId}")              //Find list of TypicalFolderStructures for a specific ServiceDisciplineId
	public ResponseEntity<?> findListTypicalFolderStructureForServiceDisciplineIdIndustry(@PathVariable("serviceDisciplineId") Long serviceDisciplineId, ModelMap modelMap) {
		try {
			List<TypicalFolderStructure> result = typicalFolderStructureService.findListTypicalFolderStructureForServiceDisciplineIdIndustry(serviceDisciplineId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/list-typical-folder-structure-id-parent/{typicalFolderStructureId}")              //Find list of TypicalFolderStructures for a specific TypicalFolderStructureId
	public ResponseEntity<?> findListTypicalFolderStructureForTypicalFolderStructureIdParent(@PathVariable("typicalFolderStructureId") Long typicalFolderStructureId, ModelMap modelMap) {
		try {
			List<TypicalFolderStructure> result = typicalFolderStructureService.findListTypicalFolderStructureForTypicalFolderStructureIdParent(typicalFolderStructureId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}



}