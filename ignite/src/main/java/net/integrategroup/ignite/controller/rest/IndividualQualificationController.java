package net.integrategroup.ignite.controller.rest;

import java.sql.CallableStatement;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.integrategroup.ignite.persistence.model.IndividualQualification;
import net.integrategroup.ignite.persistence.model.VIndividualQualification;
import net.integrategroup.ignite.persistence.service.DatabaseService;
import net.integrategroup.ignite.persistence.service.IndividualQualificationService;
import net.integrategroup.ignite.utils.MapUtils;
import net.integrategroup.ignite.utils.SecurityUtils;



/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-16 19:51:56 ******** ***** **/


@RestController
@RequestMapping("/rest/ignite/v1/individual-qualification")

public class IndividualQualificationController {

	@Autowired
	IndividualQualificationService individualQualificationService;

	@Autowired
	SecurityUtils securityUtils;

	@Autowired
	DatabaseService databaseService;

	@GetMapping("/find-all")          //All records in the IndividualQualification Table
	public ResponseEntity<?> findAll() {
		try {
			List<IndividualQualification> result = individualQualificationService.findAll();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/by-individual-qualification-id/{individualQualificationId}")   //Find the record by the PrimaryKey
	public ResponseEntity<?> getByIndividualQualificationId(@PathVariable("individualQualificationId") Long individualQualificationId) {
		try {
			IndividualQualification result = individualQualificationService.getByIndividualQualificationId(individualQualificationId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping()       //Save (update)
	public ResponseEntity<?> saveIndividualQualification(@RequestBody IndividualQualification individualQualification) {
		try {
			IndividualQualification test = individualQualificationService.getByIndividualQualificationId(individualQualification.getIndividualQualificationId());
			if (test == null) {
				throw new Exception("IndividualQualification not found");
			}
			individualQualification = individualQualificationService.save(individualQualification);
			return ResponseEntity.ok(individualQualification);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping("/new")   //Save (new)
	public ResponseEntity<?> saveIndividualQualificationNew(@RequestBody IndividualQualification individualQualification) {
		try {
			IndividualQualification test = individualQualificationService.getByIndividualQualificationId(individualQualification.getIndividualQualificationId());
			if (test != null) {
				throw new Exception("The IndividualQualification already exists");
			}
			individualQualification = individualQualificationService.save(individualQualification);
			return ResponseEntity.ok(individualQualification);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-view-individual-qualification-id/{individualQualificationId}")   //One record from View
//	public ResponseEntity<?> getByVIndividualQualificationId(@PathVariable("individualQualificationId") Long individualQualificationId) {
//		try {
//			VIndividualQualification result = individualQualificationService.getByVIndividualQualificationId(individualQualificationId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}


	@PostMapping("/delete")   //Delete a record, and insert into AuditTrial table
	public ResponseEntity<?> deleteIndividualQualification(@RequestBody Map<String, Object> data) {

		MapUtils mu = new MapUtils();

		Long individualQualificationId = mu.getAsLongOrNull(data, "individualQualificationId");
		String sql = "CALL ig_db.deleteIndividualQualification(?, ?);";

		String exampleSql = "CALL ig_db.deleteIndividualQualification(" + individualQualificationId + ", '"
			+ securityUtils.getUsername() + "');";
		System.out.println("\n\n\n" + exampleSql + "\n\n\n"); // Prints out, but does not execute, for debugging

		try {	//**//					
			Object[] params = {		
					individualQualificationId,
					securityUtils.getUsername()
			};						
			
			databaseService.executeStoredProc(sql, params);
			return ResponseEntity.ok().build();
			//**//
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/find-all-in-view")                                            //All in view
//	public ResponseEntity<?> findListAllInView()  {
//		try {
//			List<VIndividualQualification> result = individualQualificationService.findListAllInView();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-individual-qualification-for-XXX")                                       //Find List from View without parameter
//	public ResponseEntity<?> findListIndividualQualificationForXXX()  {
//		try {
//			List<VIndividualQualification> result = individualQualificationService.findListVIndividualQualificationForXXX();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

	@GetMapping("/list-view-individual-qualification-for-participant/{participantId}")                           //Find List from View that needs parameter
	public ResponseEntity<?> findListVIndividualQualificationForParticipant(@PathVariable("participantId") Long participantId,	ModelMap modelMap)  {
		try {
			List<VIndividualQualification> result = individualQualificationService.findListVIndividualQualificationForParticipant(participantId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/list-view-individual-qualification-for-XXX/{paramId}/{paramName}/{paramName2}")   //Find List from View that needs multiple parameters
//	public ResponseEntity<?> findListVIndividualQualificationForXXX(@PathVariable("paramId") Long paramId,
//		                                        @PathVariable("paramName") Long paramName,
//		                                        @PathVariable("paramName") Long paramName) {
//		try {
//			List<VIndividualQualification> result = individualQualificationService.findListVIndividualQualificationForXXX(paramId, paramName, paramName2);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-individual-qualification-for-XXX/{paramId}/{firstDay}/{lastDay}")   //Find List from View that needs date parameters   (use variable like this:  var dateParam = getMsFromDatePicker("theStartDate");)
//	public ResponseEntity<?> findListIndividualQualificationForXXX(ModelMap modelMap,
//		                                        @PathVariable("paramId") Long paramId,
//		                                        @PathVariable(name = "firstDay") Long firstDay,
//		                                        @PathVariable(name = "lastDay") Long lastDay) {
//		try {
//			Date fd = new Date(firstDay);     // Dates sent to db
//			Date ld = new Date(lastDay);
//			List<VIndividualQualification> result = individualQualificationService.findListVIndividualQualificationForXXX(paramId, fd, ld);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}



	@GetMapping("/list-individual-id/{individualId}")              //Find list of IndividualQualifications for a specific IndividualId
	public ResponseEntity<?> findListIndividualQualificationForIndividualId(@PathVariable("individualId") Long individualId, ModelMap modelMap) {
		try {
			List<IndividualQualification> result = individualQualificationService.findListIndividualQualificationForIndividualId(individualId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/list-institute-qualification-id/{instituteQualificationId}")              //Find list of IndividualQualifications for a specific InstituteQualificationId
	public ResponseEntity<?> findListIndividualQualificationForInstituteQualificationId(@PathVariable("instituteQualificationId") Long instituteQualificationId, ModelMap modelMap) {
		try {
			List<IndividualQualification> result = individualQualificationService.findListIndividualQualificationForInstituteQualificationId(instituteQualificationId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}



}