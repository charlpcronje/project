package net.integrategroup.ignite.controller.rest;

import java.sql.CallableStatement;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.integrategroup.ignite.persistence.model.Province;
import net.integrategroup.ignite.persistence.model.VProvince;
import net.integrategroup.ignite.persistence.service.DatabaseService;
import net.integrategroup.ignite.persistence.service.ProvinceService;
import net.integrategroup.ignite.utils.MapUtils;
import net.integrategroup.ignite.utils.SecurityUtils;



/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-06 16:40:44 ******** ***** **/


@RestController
@RequestMapping("/rest/ignite/v1/province")

public class ProvinceController {

	@Autowired
	ProvinceService provinceService;

	@Autowired
	SecurityUtils securityUtils;

	@Autowired
	DatabaseService databaseService;

	@GetMapping("/find-all")          //All records in the Province Table
	public ResponseEntity<?> findAll() {
		try {
			List<Province> result = provinceService.findAll();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-province-id/{provinceId}")   //Find the record by the PrimaryKey
//	public ResponseEntity<?> getByProvinceCode(@PathVariable("provinceId") Long provinceId) {
//		try {
//			Province result = provinceService.getByProvinceId(provinceId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

	@PostMapping()       //Save (update)
	public ResponseEntity<?> saveProvince(@RequestBody Province province) {
		try {
			Province test = provinceService.getByProvinceId(province.getProvinceId());
			if (test == null) {
				throw new Exception("Province not found");
			}
			province = provinceService.save(province);
			return ResponseEntity.ok(province);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping("/new")   //Save (new)
	public ResponseEntity<?> saveProvinceNew(@RequestBody Province province) {
		try {
			Province test = provinceService.getByProvinceId(province.getProvinceId());
			if (test != null) {
				throw new Exception("The Province already exists");
			}
			province = provinceService.save(province);
			return ResponseEntity.ok(province);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-view-province-code/{provinceCode}")   //One record from View
//	public ResponseEntity<?> getByVProvinceCode(@PathVariable("provinceCode") Long provinceId) {
//		try {
//			VProvince result = provinceService.getByVProvinceCode(provinceCode);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}


	@PostMapping("/delete")   //Delete a record, and insert into AuditTrial table
	public ResponseEntity<?> deleteProvince(@RequestBody Map<String, Object> data) {

		MapUtils mu = new MapUtils();

		Long provinceId = mu.getAsLongOrNull(data, "provinceId");
		String sql = "CALL ig_db.deleteProvince(?);";

		String exampleSql = "CALL ig_db.deleteProvince(" + provinceId + "');";

		System.out.println("\n\n\n" + exampleSql + "\n\n\n"); // Prints out, but does not execute, for debugging

		try {	//**//					
			Object[] params = {		
				provinceId	
			};						
			
			databaseService.executeStoredProc(sql, params);
			return ResponseEntity.ok().build();
			//**//
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/find-all-in-view")                                            //All in view
	public ResponseEntity<?> findListAllInView()  {
		try {
			List<VProvince> result = provinceService.findListAllInView();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/list-view-province-for-XXX")                                       //Find List from View without parameter
//	public ResponseEntity<?> findListProvinceForXXX()  {
//		try {
//			List<VProvince> result = provinceService.findListVProvinceForXXX();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

	@GetMapping("/list-view-province-for-country/{countryId}")                           //Find List from View that needs parameter
	public ResponseEntity<?> findListVProvinceForCountry(@PathVariable("countryId") Long countryId,	ModelMap modelMap)  {
		try {
			List<VProvince> result = provinceService.findListVProvinceForCountry( countryId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/list-view-province-for-XXX/{paramId}/{paramName}/{paramName2}")   //Find List from View that needs multiple parameters
//	public ResponseEntity<?> findListVProvinceForXXX(@PathVariable("paramId") Long paramId,
//		                                        @PathVariable("paramName") Long paramName,
//		                                        @PathVariable("paramName") Long paramName) {
//		try {
//			List<VProvince> result = provinceService.findListVProvinceForXXX(paramId, paramName, paramName2);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-province-for-XXX/{paramId}/{firstDay}/{lastDay}")   //Find List from View that needs date parameters   (use variable like this:  var dateParam = getMsFromDatePicker("theStartDate");)
//	public ResponseEntity<?> findListProvinceForXXX(ModelMap modelMap,
//		                                        @PathVariable("paramId") Long paramId,
//		                                        @PathVariable(name = "firstDay") Long firstDay,
//		                                        @PathVariable(name = "lastDay") Long lastDay) {
//		try {
//			Date fd = new Date(firstDay);     // Dates sent to db
//			Date ld = new Date(lastDay);
//			List<VProvince> result = provinceService.findListVProvinceForXXX(paramId, fd, ld);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}


	@GetMapping("/list-country-id/{countryId}")              //Find list of Provinces for a specific CountryId
	public ResponseEntity<?> findListProvinceForCountryId(@PathVariable("countryId") Long countryId, ModelMap modelMap) {
		try {
			List<VProvince> result = provinceService.findListProvinceForCountryId(countryId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}



}