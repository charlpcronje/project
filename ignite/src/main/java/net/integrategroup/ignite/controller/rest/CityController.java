package net.integrategroup.ignite.controller.rest;

import java.sql.CallableStatement;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.integrategroup.ignite.persistence.model.City;
import net.integrategroup.ignite.persistence.model.VCity;
import net.integrategroup.ignite.persistence.model.VCityMin;
import net.integrategroup.ignite.persistence.service.CityService;
import net.integrategroup.ignite.persistence.service.DatabaseService;
import net.integrategroup.ignite.utils.MapUtils;
import net.integrategroup.ignite.utils.SecurityUtils;



/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-06 16:40:42 ******** ***** **/


@RestController
@RequestMapping("/rest/ignite/v1/city")

public class CityController {

	@Autowired
	CityService cityService;

	@Autowired
	SecurityUtils securityUtils;

	@Autowired
	DatabaseService databaseService;

	@GetMapping("/find-all")          //All records in the City Table
	public ResponseEntity<?> findAll() {
		try {
			List<City> result = cityService.findAll();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/by-city-id/{cityId}")   //Find the record by the PrimaryKey
	public ResponseEntity<?> getByCityId(@PathVariable("cityId") Long cityId) {
		try {
			City result = cityService.getByCityId(cityId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping()       //Save (update)
	public ResponseEntity<?> saveCity(@RequestBody City city) {
		try {
			City test = cityService.getByCityId(city.getCityId());
			if (test == null) {
				throw new Exception("City not found");
			}
			city = cityService.save(city);
			return ResponseEntity.ok(city);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping("/new")   //Save (new)
	public ResponseEntity<?> saveCityNew(@RequestBody City city) {
		try {
			City test = cityService.getByCityId(city.getCityId());
			if (test != null) {
				throw new Exception("The City already exists");
			}
			city = cityService.save(city);
			return ResponseEntity.ok(city);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-view-city-id/{cityId}")   //One record from View
//	public ResponseEntity<?> getByVCityId(@PathVariable("cityId") Long cityId) {
//		try {
//			VCity result = cityService.getByVCityId(cityId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}


	@PostMapping("/delete")   //Delete a record, and insert into AuditTrial table
	public ResponseEntity<?> deleteCity(@RequestBody Map<String, Object> data) {

		MapUtils mu = new MapUtils();

		Long cityId = mu.getAsLongOrNull(data, "cityId");
		String sql = "CALL ig_db.deleteCity(?, ?);";

		String exampleSql = "CALL ig_db.deleteCity(" + cityId + ", '"
			+ securityUtils.getUsername() + "');";
		System.out.println("\n\n\n" + exampleSql + "\n\n\n"); // Prints out, but does not execute, for debugging

		try {
			Object[] params = {
					cityId,
					securityUtils.getUsername()
			};
			
			databaseService.executeStoredProc(sql, params);
			
			return ResponseEntity.ok().build();

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/find-all-in-view")                                            //All in view
	public ResponseEntity<?> findListAllInView()  {
		try {
			List<VCity> result = cityService.findListAllInView();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/list-view-city-for-XXX")                                       //Find List from View without parameter
//	public ResponseEntity<?> findListCityForXXX()  {
//		try {
//			List<VCity> result = cityService.findListVCityForXXX();
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

	@GetMapping("/list-view-city-for-province/{provinceId}")                           //Find List from View that needs parameter
	public ResponseEntity<?> findListVCityForProvince(@PathVariable("provinceId") Long provinceId,	ModelMap modelMap)  {
		try {
			List<VCity> result = cityService.findListVCityForProvince( provinceId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
	
	@GetMapping("/list-view-city-for-province-min/{provinceId}")                           //Find List from Min View that needs parameter
	public ResponseEntity<?> findListVCityMinForProvince(@PathVariable("provinceId") Long provinceId,	ModelMap modelMap)  {
		try {
			List<VCityMin> result = cityService.findListVCityMinForProvince( provinceId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}	

//	@GetMapping("/list-view-city-for-XXX/{paramId}/{paramName}/{paramName2}")   //Find List from View that needs multiple parameters
//	public ResponseEntity<?> findListVCityForXXX(@PathVariable("paramId") Long paramId,
//		                                        @PathVariable("paramName") Long paramName,
//		                                        @PathVariable("paramName") Long paramName) {
//		try {
//			List<VCity> result = cityService.findListVCityForXXX(paramId, paramName, paramName2);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

//	@GetMapping("/list-view-city-for-XXX/{paramId}/{firstDay}/{lastDay}")   //Find List from View that needs date parameters   (use variable like this:  var dateParam = getMsFromDatePicker("theStartDate");)
//	public ResponseEntity<?> findListCityForXXX(ModelMap modelMap,
//		                                        @PathVariable("paramId") Long paramId,
//		                                        @PathVariable(name = "firstDay") Long firstDay,
//		                                        @PathVariable(name = "lastDay") Long lastDay) {
//		try {
//			Date fd = new Date(firstDay);     // Dates sent to db
//			Date ld = new Date(lastDay);
//			List<VCity> result = cityService.findListVCityForXXX(paramId, fd, ld);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}



//	@GetMapping("/list-country-code/{countryId}")              //Find list of Citys for a specific CountryId
//	public ResponseEntity<?> findListCityForCountryId(@PathVariable("countryId") Long countryId, ModelMap modelMap) {
//		try {
//			List<City> result = cityService.findListCityForCountryId(countryId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}

	@GetMapping("/list-province-id/{provinceId}")              //Find list of Citys for a specific ProvinceId
	public ResponseEntity<?> findListCityForProvinceId(@PathVariable("provinceId") Long provinceId, ModelMap modelMap) {
		try {
			List<VCity> result = cityService.findListCityForProvinceId(provinceId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}



}