package net.integrategroup.ignite.controller.rest;

import java.sql.CallableStatement;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import net.integrategroup.ignite.persistence.model.ProfessionalInstitute;
import net.integrategroup.ignite.persistence.service.DatabaseService;
import net.integrategroup.ignite.persistence.service.ProfessionalInstituteService;
import net.integrategroup.ignite.utils.MapUtils;
import net.integrategroup.ignite.utils.SecurityUtils;



/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-16 19:51:57 ******** ***** **/


@RestController
@RequestMapping("/rest/ignite/v1/professional-institute")

public class ProfessionalInstituteController {

	@Autowired
	ProfessionalInstituteService professionalInstituteService;

	@Autowired
	SecurityUtils securityUtils;

	@Autowired
	DatabaseService databaseService;

	@GetMapping("/find-all")          //All records in the ProfessionalInstitute Table
	public ResponseEntity<?> findAll() {
		try {
			List<ProfessionalInstitute> result = professionalInstituteService.findAll();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@GetMapping("/by-professional-institute-id/{professionalInstituteId}")   //Find the record by the PrimaryKey
	public ResponseEntity<?> getByProfessionalInstituteId(@PathVariable("professionalInstituteId") Long professionalInstituteId) {
		try {
			ProfessionalInstitute result = professionalInstituteService.getByProfessionalInstituteId(professionalInstituteId);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping()       //Save (update)
	public ResponseEntity<?> saveProfessionalInstitute(@RequestBody ProfessionalInstitute professionalInstitute) {
		try {
			ProfessionalInstitute test = professionalInstituteService.getByProfessionalInstituteId(professionalInstitute.getProfessionalInstituteId());
			if (test == null) {
				throw new Exception("ProfessionalInstitute not found");
			}
			professionalInstitute = professionalInstituteService.save(professionalInstitute);
			return ResponseEntity.ok(professionalInstitute);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PostMapping("/new")   //Save (new)
	public ResponseEntity<?> saveProfessionalInstituteNew(@RequestBody ProfessionalInstitute professionalInstitute) {
		try {
			ProfessionalInstitute test = professionalInstituteService.getByProfessionalInstituteId(professionalInstitute.getProfessionalInstituteId());
			if (test != null) {
				throw new Exception("The ProfessionalInstitute already exists");
			}
			professionalInstitute = professionalInstituteService.save(professionalInstitute);
			return ResponseEntity.ok(professionalInstitute);
		} catch (Exception e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

//	@GetMapping("/by-view-professional-institute-id/{professionalInstituteId}")   //One record from View
//	public ResponseEntity<?> getByVProfessionalInstituteId(@PathVariable("professionalInstituteId") Long professionalInstituteId) {
//		try {
//			VProfessionalInstitute result = professionalInstituteService.getByVProfessionalInstituteId(professionalInstituteId);
//			return ResponseEntity.ok(result);
//		} catch (Exception e) {
//			return ResponseEntity.badRequest().body(e.getMessage());
//		}
//	}


	@PostMapping("/delete")   //Delete a record, and insert into AuditTrial table
	public ResponseEntity<?> deleteProfessionalInstitute(@RequestBody Map<String, Object> data) {

		MapUtils mu = new MapUtils();

		Long professionalInstituteId = mu.getAsLongOrNull(data, "professionalInstituteId");
		String sql = "CALL ig_db.deleteProfessionalInstitute(?);";

		String exampleSql = "CALL ig_db.deleteProfessionalInstitute(" + professionalInstituteId + ");";
		System.out.println("\n\n\n" + exampleSql + "\n\n\n"); // Prints out, but does not execute, for debugging

		try {	//**//					
			Object[] params = {		
				professionalInstituteId	
			};						
			
			databaseService.executeStoredProc(sql, params);
			return ResponseEntity.ok().build();
			//**//
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}





}