package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-19 07:23:02 ******** *sdr* **/

@Entity
@Table(schema = "ig_db", name = "SdRole")
public class SdRole implements Serializable {


    private static final long serialVersionUID = 283711095025573798L; /** ID was Generated by Johannes **/


    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "SdRoleId")
	private Long sdRoleId;

	@Column(name = "ServiceDisciplineId")
	private Long serviceDisciplineId;

/***	@OneToOne(targetEntity = ServiceDiscipline.class)
	@JoinColumn(name = "ServiceDisciplineId", referencedColumnName = "ServiceDisciplineId", nullable = true, insertable = false, updatable = false)
	private ServiceDiscipline serviceDiscipline; ***/

	@Column(name = "RoleOnAProjectId")
	private Long roleOnAProjectId;

/***	@OneToOne(targetEntity = RoleOnAProject.class)
	@JoinColumn(name = "RoleOnAProjectId", referencedColumnName = "RoleOnAProjectId", nullable = true, insertable = false, updatable = false)
	private RoleOnAProject roleOnAProject; ***/

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastUpdateTimestamp")
	private Date lastUpdateTimestamp;

	@Column(name = "LastUpdateUserName")
	private String lastUpdateUserName;




	public Long getSdRoleId() {
		return sdRoleId;
	}

	public void setSdRoleId(Long sdRoleId) {
		this.sdRoleId = sdRoleId;
	}

	public Long getServiceDisciplineId() {
		return serviceDisciplineId;
	}

	public void setServiceDisciplineId(Long serviceDisciplineId) {
		this.serviceDisciplineId = serviceDisciplineId;
	}

/***	public ServiceDiscipline getServiceDiscipline() {
		return serviceDiscipline;
	}

	public void setServiceDiscipline(ServiceDiscipline serviceDiscipline) {
		this.serviceDiscipline = serviceDiscipline;
	} ***/

	public Long getRoleOnAProjectId() {
		return roleOnAProjectId;
	}

	public void setRoleOnAProjectId(Long roleOnAProjectId) {
		this.roleOnAProjectId = roleOnAProjectId;
	}

/***	public RoleOnAProject getRoleOnAProject() {
		return roleOnAProject;
	}

	public void setRoleOnAProject(RoleOnAProject roleOnAProject) {
		this.roleOnAProject = roleOnAProject;
	} ***/

	public Date getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		this.lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public String getLastUpdateUserName() {
		return lastUpdateUserName;
	}

	public void setLastUpdateUserName(String lastUpdateUserName) {
		this.lastUpdateUserName = lastUpdateUserName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "sdRoleId" }                 //0 MySql-TableName: SdRole
		,{ data: "serviceDisciplineId" }      //1
		,{ data: "roleOnAProjectId" }       //2
		,{ data: "lastUpdateTimestamp" }      //3
		,{ data: "lastUpdateUserName" }       //4
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 4]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [3]
		}
	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "sdRoleId", name: "SdRoleId" }                             //0 MySql-TableName: SdRole
		,{ data: "serviceDisciplineId", name: "ServiceDisciplineId" }       //1
		,{ data: "roleOnAProjectId", name: "RoleOnAProjectId" }         //2
		,{ data: "lastUpdateTimestamp", name: "LastUpdateTimestamp" }       //3
		,{ data: "lastUpdateUserName", name: "LastUpdateUserName" }         //4
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 4]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [3]
		}
	];







Vir 'n Save Data function                        (js2Str)


	var postUrl = "/rest/ignite/v1/sd-role/new";
	var postData = {
		sdRoleId : $("#sdrSdRoleId").val()                 //0 MySql-TableName: SdRole
		,serviceDisciplineId : $("#sdrServiceDisciplineId").val()                    //1
		,roleOnAProjectId : $("#sdrRoleOnAProjectId").val()                      //2
		,lastUpdateTimestamp : getMsFromDatePicker("sdrLastUpdateTimestamp")         //3
	};

	var errors = "";






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: SdRole										   (js3Str)
		$("#sdrSdRoleId").val(data.sdRoleId);                             //0
		$("#sdrServiceDisciplineId").val(data.serviceDisciplineId);       //1
		populateSelect("sdrServiceDisciplineId",                          //name of html select element that will be populated
				"/rest/ignite/v1/service-discipline/find-all",            //url
				"serviceDisciplineId",                                    //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.serviceDisciplineId,                                 //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#sdrRoleOnAProjectId").val(data.roleOnAProjectId);         //2
		populateSelect("sdrRoleOnAProjectId",                           //name of html select element that will be populated
				"/rest/ignite/v1/role-on-a-project/find-all",             //url
				"roleOnAProjectId",                                     //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.roleOnAProjectId,                                  //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#sdrLastUpdateTimestamp").datepicker("setDate", data.lastUpdateTimestamp == null? timestampToString(new Date(), false) : new Date(data.lastUpdateTimestamp));       //3






/**  HTML  om 'n grid te populate
												<th>SdRoleId</th>                    <!--0  MySql-TableName: SdRole-->
												<th>ServiceDisciplineId</th>         <!--1  ServiceDisciplineId-->
												<th>RoleOnAProjectId</th>          <!--2  RoleOnAProjectId-->
												<th>Last Update Timestamp</th>       <!--3  LastUpdateTimestamp-->
												<th>LastUpdateUserName</th>          <!--4  LastUpdateUserName-->

*/