package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-25 18:47:32 ******** *xxx* **/

@Entity
@Table(schema = "ig_db", name = "ExpenseType")
public class ExpenseType implements Serializable {


    private static final long serialVersionUID = 856629483981084523L; /** ID was Generated by Johannes **/


    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ExpenseTypeId")
	private Long expenseTypeId;

	@Column(name = "ExpenseTypeParentId")
	private Long expenseTypeParentId;

	@Column(name = "UnitTypeCode")
	private String unitTypeCode;

	@Column(name = "Name")
	private String name;

	@Column(name = "Description")
	private String description;

	@Column(name = "AllowanceFlag")
	private String allowanceFlag;

	@Column(name = "AllowHandlingPerc")
	private String allowHandlingPerc;

	@Column(name = "AllowMaxAmtPerUnit")
	private String allowMaxAmtPerUnit;

	@Column(name = "AllowAsset")
	private String allowAsset;

	@Column(name = "AllowForAllParticipantTypes")
	private String allowForAllParticipantTypes;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastUpdateTimestamp")
	private Date lastUpdateTimestamp;

	@Column(name = "LastUpdateUserName")
	private String lastUpdateUserName;




	public Long getExpenseTypeId() {
		return expenseTypeId;
	}

	public void setExpenseTypeId(Long expenseTypeId) {
		this.expenseTypeId = expenseTypeId;
	}

	public Long getExpenseTypeParentId() {
		return expenseTypeParentId;
	}

	public void setExpenseTypeParentId(Long expenseTypeParentId) {
		this.expenseTypeParentId = expenseTypeParentId;
	}

	public String getUnitTypeCode() {
		return unitTypeCode;
	}

	public void setUnitTypeCode(String unitTypeCode) {
		this.unitTypeCode = unitTypeCode;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getAllowanceFlag() {
		return allowanceFlag;
	}

	public void setAllowanceFlag(String allowanceFlag) {
		this.allowanceFlag = allowanceFlag;
	}

	public String getAllowHandlingPerc() {
		return allowHandlingPerc;
	}

	public void setAllowHandlingPerc(String allowHandlingPerc) {
		this.allowHandlingPerc = allowHandlingPerc;
	}

	public String getAllowMaxAmtPerUnit() {
		return allowMaxAmtPerUnit;
	}

	public void setAllowMaxAmtPerUnit(String allowMaxAmtPerUnit) {
		this.allowMaxAmtPerUnit = allowMaxAmtPerUnit;
	}

	public String getAllowAsset() {
		return allowAsset;
	}

	public void setAllowAsset(String allowAsset) {
		this.allowAsset = allowAsset;
	}

	public String getAllowForAllParticipantTypes() {
		return allowForAllParticipantTypes;
	}

	public void setAllowForAllParticipantTypes(String allowForAllParticipantTypes) {
		this.allowForAllParticipantTypes = allowForAllParticipantTypes;
	}

	public Date getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		this.lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public String getLastUpdateUserName() {
		return lastUpdateUserName;
	}

	public void setLastUpdateUserName(String lastUpdateUserName) {
		this.lastUpdateUserName = lastUpdateUserName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "expenseTypeId" }            //0 MySql-TableName: ExpenseType
		,{ data: "expenseTypeParentId" }      //1
		,{ data: "expenseTypeId" }          //2
		,{ data: "unitTypeCode" }               //3
		,{ data: "name" }                     //4
		,{ data: "description" }              //5
		,{ data: "allowanceFlag" }            //6
		,{ data: "allowHandlingPerc" }        //7
		,{ data: "allowMaxAmtPerUnit" }       //8
		,{ data: "allowAsset" }               //9
		,{ data: "allowForAllParticipantTypes" } //10
		,{ data: "lastUpdateTimestamp" }      //11
		,{ data: "lastUpdateUserName" }       //12
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 12]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [11]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowanceFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[6]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowHandlingPerc == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[7]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowMaxAmtPerUnit == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[8]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowAsset == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[9]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowForAllParticipantTypes == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[10]
		}

	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "expenseTypeId", name: "ExpenseTypeId" }                   //0 MySql-TableName: ExpenseType
		,{ data: "expenseTypeParentId", name: "ExpenseTypeParentId" }       //1
		,{ data: "expenseTypeId", name: "ExpenseTypeId" }               //2
		,{ data: "unitTypeCode", name: "UnitTypeCode" }                         //3
		,{ data: "name", name: "Name" }                                     //4
		,{ data: "description", name: "Description" }                       //5
		,{ data: "allowanceFlag", name: "AllowanceFlag" }                   //6
		,{ data: "allowHandlingPerc", name: "AllowHandlingPerc" }           //7
		,{ data: "allowMaxAmtPerUnit", name: "AllowMaxAmtPerUnit" }         //8
		,{ data: "allowAsset", name: "AllowAsset" }                         //9
		,{ data: "allowForAllParticipantTypes", name: "AllowForAllParticipantTypes" } //10
		,{ data: "lastUpdateTimestamp", name: "LastUpdateTimestamp" }       //11
		,{ data: "lastUpdateUserName", name: "LastUpdateUserName" }         //12
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 12]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [11]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowanceFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[6]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowHandlingPerc == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[7]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowMaxAmtPerUnit == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[8]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowAsset == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[9]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowForAllParticipantTypes == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[10]
		}


	];







Vir 'n Save Data function                        (js2Str)


	var postUrl = "/rest/ignite/v1/expense-type/new";
	var postData = {
		expenseTypeId : $("#xxxExpenseTypeId").val()            //0 MySql-TableName: ExpenseType
		,expenseTypeParentId : $("#xxxExpenseTypeParentId").val()                    //1
		,expenseTypeId : $("#xxxExpenseTypeId").val()                            //2
		,unitTypeCode : $("#xxxUnitTypeCode").val()                                      //3
		,name : $("#xxxName").val()                                                  //4
		,description : $("#xxxDescription").val()                                    //5
		,allowanceFlag : $("#xxxAllowanceFlag").val()                                //6    use one of these
		,allowanceFlag : $("#xxxAllowanceFlag").is(":checked") ? "Y" : "N"         //6    use one of these
		,allowHandlingPerc : $("#xxxAllowHandlingPerc").val()                        //7    use one of these
		,allowHandlingPerc : $("#xxxAllowHandlingPerc").is(":checked") ? "Y" : "N" //7    use one of these
		,allowMaxAmtPerUnit : $("#xxxAllowMaxAmtPerUnit").val()                      //8    use one of these
		,allowMaxAmtPerUnit : $("#xxxAllowMaxAmtPerUnit").is(":checked") ? "Y" : "N" //8    use one of these
		,allowAsset : $("#xxxAllowAsset").val()                                      //9    use one of these
		,allowAsset : $("#xxxAllowAsset").is(":checked") ? "Y" : "N"               //9    use one of these
		,allowForAllParticipantTypes : $("#xxxAllowForAllParticipantTypes").val()    //10    use one of these
		,allowForAllParticipantTypes : $("#xxxAllowForAllParticipantTypes").is(":checked") ? "Y" : "N" //10    use one of these
		,lastUpdateTimestamp : getMsFromDatePicker("xxxLastUpdateTimestamp")         //11
	};

	var errors = "";






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: ExpenseType										   (js3Str)
		$("#xxxExpenseTypeId").val(data.expenseTypeId);                   //0
		$("#xxxExpenseTypeParentId").val(data.expenseTypeParentId);       //1
		populateSelect("xxxExpenseTypeParentId",                          //name of html select element that will be populated
				"/rest/ignite/v1/expense-type-parent/find-all",           //url
				"expenseTypeParentId",                                    //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.expenseTypeParentId,                                 //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxExpenseTypeId").val(data.expenseTypeId);               //2
		populateSelect("xxxExpenseTypeId",                              //name of html select element that will be populated
				"/rest/ignite/v1/expense-type/find-all",                  //url
				"expenseTypeId",                                        //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.expenseTypeId,                                     //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxUnitTypeCode").val(data.unitTypeCode);                         //3
		populateSelect("xxxUnitTypeCode",                                   //name of html select element that will be populated
				"/rest/ignite/v1/unit-type/find-all",                     //url
				"unitTypeCode",                                             //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.unitTypeCode,                                          //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxName").val(data.name);                                     //4
		$("#xxxDescription").val(data.description);                       //5
		$("#xxxAllowanceFlag").val(data.allowanceFlag);                   //6    use one of these
		$("#xxxAllowanceFlag").prop("checked", data.allowanceFlag == "Y"); //6    use one of these
		$("#xxxAllowHandlingPerc").val(data.allowHandlingPerc);           //7    use one of these
		$("#xxxAllowHandlingPerc").prop("checked", data.allowHandlingPerc == "Y"); //7    use one of these
		$("#xxxAllowMaxAmtPerUnit").val(data.allowMaxAmtPerUnit);         //8    use one of these
		$("#xxxAllowMaxAmtPerUnit").prop("checked", data.allowMaxAmtPerUnit == "Y"); //8    use one of these
		$("#xxxAllowAsset").val(data.allowAsset);                         //9    use one of these
		$("#xxxAllowAsset").prop("checked", data.allowAsset == "Y");      //9    use one of these
		$("#xxxAllowForAllParticipantTypes").val(data.allowForAllParticipantTypes); //10    use one of these
		$("#xxxAllowForAllParticipantTypes").prop("checked", data.allowForAllParticipantTypes == "Y"); //10    use one of these
		$("#xxxLastUpdateTimestamp").datepicker("setDate", data.lastUpdateTimestamp == null? timestampToString(new Date(), false) : new Date(data.lastUpdateTimestamp));       //11






/**  HTML  om 'n grid te populate
												<th>ExpenseTypeId</th>               <!--0  MySql-TableName: ExpenseType-->
												<th>ExpenseTypeParentId</th>         <!--1  ExpenseTypeParentId-->
												<th>ExpenseTypeId</th>             <!--2  ExpenseTypeId-->
												<th>UnitTypeCode</th>                  <!--3  UnitTypeCode-->
												<th>Name</th>                        <!--4  Name-->
												<th>Description</th>                 <!--5  Description-->
												<th>Allowance</th>                   <!--6  AllowanceFlag-->
												<th>Allow Handling Perc</th>         <!--7  AllowHandlingPerc-->
												<th>Allow Max Amt Per Unit</th>      <!--8  AllowMaxAmtPerUnit-->
												<th>Allow Asset</th>                 <!--9  AllowAsset-->
												<th>Allow For All Participant Types</th> <!--10  AllowForAllParticipantTypes-->
												<th>Last Update Timestamp</th>       <!--11  LastUpdateTimestamp-->
												<th>LastUpdateUserName</th>          <!--12  LastUpdateUserName-->

*/