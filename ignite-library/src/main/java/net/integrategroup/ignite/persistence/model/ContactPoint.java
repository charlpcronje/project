package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-09 11:33:18 ******** *cpt* **/

@Entity
@Table(schema = "ig_db", name = "ContactPoint")
public class ContactPoint implements Serializable {


    private static final long serialVersionUID = 900702904592940507L; /** ID was Generated by Johannes **/


    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ContactPointId")
	private Long contactPointId;

	@Column(name = "ParticipantOfficeId")
	private Long participantOfficeId;

	@Column(name = "SuburbId")
	private Long suburbId;

	@Column(name = "AddressLine1")
	private String addressLine1;

	@Column(name = "AddressLine2")
	private String addressLine2;

	@Column(name = "AddressLine3")
	private String addressLine3;

	@Column(name = "Name")
	private String name;

	@Column(name = "EmailAddress")
	private String emailAddress;

	@Column(name = "PhoneNumber")
	private String phoneNumber;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastUpdateTimestamp")
	private Date lastUpdateTimestamp;

	@Column(name = "LastUpdateUserName")
	private String lastUpdateUserName;




	public Long getContactPointId() {
		return contactPointId;
	}

	public void setContactPointId(Long contactPointId) {
		this.contactPointId = contactPointId;
	}

	public Long getParticipantOfficeId() {
		return participantOfficeId;
	}

	public void setParticipantOfficeId(Long participantOfficeId) {
		this.participantOfficeId = participantOfficeId;
	}


	public Long getSuburbId() {
		return suburbId;
	}

	public void setSuburbId(Long suburbId) {
		this.suburbId = suburbId;
	}

	public String getAddressLine1() {
		return addressLine1;
	}

	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}

	public String getAddressLine2() {
		return addressLine2;
	}

	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}

	public String getAddressLine3() {
		return addressLine3;
	}

	public void setAddressLine3(String addressLine3) {
		this.addressLine3 = addressLine3;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmailAddress() {
		return emailAddress;
	}

	public void setEmailAddress(String emailAddress) {
		this.emailAddress = emailAddress;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public Date getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		this.lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public String getLastUpdateUserName() {
		return lastUpdateUserName;
	}

	public void setLastUpdateUserName(String lastUpdateUserName) {
		this.lastUpdateUserName = lastUpdateUserName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [                      //Om 'n grid vol te maak.
		 { data: "contactPointId" }           //0 MySql-TableName: ContactPoint
		,{ data: "participantOfficeId" }      //1
		,{ data: "cityId" }                   //2
		,{ data: "suburbId" }                 //3
		,{ data: "addressLine1" }             //4
		,{ data: "addressLine2" }             //5
		,{ data: "addressLine3" }             //6
		,{ data: "name" }                     //7
		,{ data: "emailAddress" }             //8
		,{ data: "phoneNumber" }              //9
		,{ data: "lastUpdateTimestamp" }      //10
		,{ data: "lastUpdateUserName" }       //11
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 10, 11]
		}
	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "contactPointId", name: "ContactPointId" }                 //0 MySql-TableName: ContactPoint
		,{ data: "participantOfficeId", name: "ParticipantOfficeId" }       //1
		,{ data: "cityId", name: "CityId" }                                 //2
		,{ data: "suburbId", name: "SuburbId" }                             //3
		,{ data: "addressLine1", name: "AddressLine1" }                     //4
		,{ data: "addressLine2", name: "AddressLine2" }                     //5
		,{ data: "addressLine3", name: "AddressLine3" }                     //6
		,{ data: "name", name: "Name" }                                     //7
		,{ data: "emailAddress", name: "EmailAddress" }                     //8
		,{ data: "phoneNumber", name: "PhoneNumber" }                       //9
		,{ data: "lastUpdateTimestamp", name: "LastUpdateTimestamp" }       //10
		,{ data: "lastUpdateUserName", name: "LastUpdateUserName" }         //11
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 10, 11]
		}
	];







Vir 'n Save Data function                        (js2Str)


	var postUrl = "/rest/ignite/v1/contact-point/new";
	var postData = {
		contactPointId : $("#cptContactPointId").val()           //0 MySql-TableName: ContactPoint
		,participantOfficeId : $("#cptParticipantOfficeId").val()                    //1
		,cityId : $("#cptCityId").val()                                              //2
		,suburbId : $("#cptSuburbId").val()                                          //3
		,addressLine1 : $("#cptAddressLine1").val()                                  //4
		,addressLine2 : $("#cptAddressLine2").val()                                  //5
		,addressLine3 : $("#cptAddressLine3").val()                                  //6
		,name : $("#cptName").val()                                                  //7
		,emailAddress : $("#cptEmailAddress").val()                                  //8
		,phoneNumber : $("#cptPhoneNumber").val()                                    //9
	};

	var errors = "";






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: ContactPoint										   (js3Str)
		$("#cptContactPointId").val(data.contactPointId);                 //0
		$("#cptParticipantOfficeId").val(data.participantOfficeId);       //1
		populateSelect("cptParticipantOfficeId",                          //name of html select element that will be populated
				"/rest/ignite/v1/participant-office/find-all",            //url
				"participantOfficeId",                                    //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.participantOfficeId,                                 //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#cptCityId").val(data.cityId);                                 //2
		populateSelect("cptCityId",                                       //name of html select element that will be populated
				"/rest/ignite/v1/city/find-all",                          //url
				"cityId",                                                 //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.cityId,                                              //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#cptSuburbId").val(data.suburbId);                             //3
		populateSelect("cptSuburbId",                                     //name of html select element that will be populated
				"/rest/ignite/v1/suburb/find-all",                        //url
				"suburbId",                                               //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.suburbId,                                            //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#cptAddressLine1").val(data.addressLine1);                     //4
		$("#cptAddressLine2").val(data.addressLine2);                     //5
		$("#cptAddressLine3").val(data.addressLine3);                     //6
		$("#cptName").val(data.name);                                     //7
		$("#cptEmailAddress").val(data.emailAddress);                     //8
		$("#cptPhoneNumber").val(data.phoneNumber);                       //9






/**  HTML  om 'n grid te populate
												<th>ContactPointId</th>              <!--0  MySql-TableName: ContactPoint-->
												<th>ParticipantOfficeId</th>         <!--1  ParticipantOfficeId-->
												<th>CityId</th>                      <!--2  CityId-->
												<th>SuburbId</th>                    <!--3  SuburbId-->
												<th>Address Line1</th>               <!--4  AddressLine1-->
												<th>Address Line2</th>               <!--5  AddressLine2-->
												<th>Address Line3</th>               <!--6  AddressLine3-->
												<th>Name</th>                        <!--7  Name-->
												<th>Email Address</th>               <!--8  EmailAddress-->
												<th>Phone Number</th>                <!--9  PhoneNumber-->
												<th>LastUpdateTimestamp</th>         <!--10  LastUpdateTimestamp-->
												<th>LastUpdateUserName</th>          <!--11  LastUpdateUserName-->

*/