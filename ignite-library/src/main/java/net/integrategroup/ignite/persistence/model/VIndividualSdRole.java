package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-19 14:22:04 ******** *isd* **/

@Entity
@Table(schema = "ig_db", name = "vIndividualSdRole")
public class VIndividualSdRole implements Serializable {


    private static final long serialVersionUID = 806443280428400026L; /** ID was Generated by Johannes **/


    @Id
	@Column(name = "IndividualSdRoleId")
	private Long individualSdRoleId;

	@Column(name = "IndividualId")
	private Long individualId;

/***	@OneToOne(targetEntity = Individual.class)
	@JoinColumn(name = "IndividualId", referencedColumnName = "IndividualId", nullable = true, insertable = false, updatable = false)
	private Individual individual; ***/

	@Column(name = "SdRoleId")
	private Long sdRoleId;

/***	@OneToOne(targetEntity = SdRole.class)
	@JoinColumn(name = "SdRoleId", referencedColumnName = "SdRoleId", nullable = true, insertable = false, updatable = false)
	private SdRole sdRole; ***/

	@Column(name = "CompetencyLevelId")
	private Long competencyLevelId;

/***	@OneToOne(targetEntity = CompetencyLevel.class)
	@JoinColumn(name = "CompetencyLevelId", referencedColumnName = "CompetencyLevelId", nullable = true, insertable = false, updatable = false)
	private CompetencyLevel competencyLevel; ***/

	@Column(name = "YearExperience")
	private Long yearExperience;

	@Column(name = "ParticipantId")
	private Long participantId;

/***	@OneToOne(targetEntity = Participant.class)
	@JoinColumn(name = "ParticipantId", referencedColumnName = "ParticipantId", nullable = true, insertable = false, updatable = false)
	private Participant participant; ***/

	@Column(name = "CompetencyLevelName")
	private String competencyLevelName;

	@Column(name = "ServiceDisciplineId")
	private Long serviceDisciplineId;

/***	@OneToOne(targetEntity = ServiceDiscipline.class)
	@JoinColumn(name = "ServiceDisciplineId", referencedColumnName = "ServiceDisciplineId", nullable = true, insertable = false, updatable = false)
	private ServiceDiscipline serviceDiscipline; ***/

	@Column(name = "ServiceDisciplineCode")
	private String serviceDisciplineCode;

/***	@OneToOne(targetEntity = ServiceDiscipline.class)
	@JoinColumn(name = "ServiceDisciplineCode", referencedColumnName = "ServiceDisciplineCode", nullable = true, insertable = false, updatable = false)
	private ServiceDiscipline serviceDiscipline; ***/

	@Column(name = "ServiceDisciplineName")
	private String serviceDisciplineName;

	@Column(name = "RoleOnAProjectName")
	private String roleOnAProjectName;

	@Column(name = "CombinedName")
	private String combinedName;

	@Column(name = "sdParentName")
	private String sdParentName;

	@Column(name = "sdGrandParentName")
	private String sdGrandParentName;

	@Column(name = "sdIndustryName")
	private String sdIndustryName;




	public Long getIndividualSdRoleId() {
		return individualSdRoleId;
	}

	public void setIndividualSdRoleId(Long individualSdRoleId) {
		this.individualSdRoleId = individualSdRoleId;
	}

	public Long getIndividualId() {
		return individualId;
	}

	public void setIndividualId(Long individualId) {
		this.individualId = individualId;
	}

/***	public Individual getIndividual() {
		return individual;
	}

	public void setIndividual(Individual individual) {
		this.individual = individual;
	} ***/

	public Long getSdRoleId() {
		return sdRoleId;
	}

	public void setSdRoleId(Long sdRoleId) {
		this.sdRoleId = sdRoleId;
	}

/***	public SdRole getSdRole() {
		return sdRole;
	}

	public void setSdRole(SdRole sdRole) {
		this.sdRole = sdRole;
	} ***/

	public Long getCompetencyLevelId() {
		return competencyLevelId;
	}

	public void setCompetencyLevelId(Long competencyLevelId) {
		this.competencyLevelId = competencyLevelId;
	}

/***	public CompetencyLevel getCompetencyLevel() {
		return competencyLevel;
	}

	public void setCompetencyLevel(CompetencyLevel competencyLevel) {
		this.competencyLevel = competencyLevel;
	} ***/

	public Long getYearExperience() {
		return yearExperience;
	}

	public void setYearExperience(Long yearExperience) {
		this.yearExperience = yearExperience;
	}

	public Long getParticipantId() {
		return participantId;
	}

	public void setParticipantId(Long participantId) {
		this.participantId = participantId;
	}

/***	public Participant getParticipant() {
		return participant;
	}

	public void setParticipant(Participant participant) {
		this.participant = participant;
	} ***/

	public String getCompetencyLevelName() {
		return competencyLevelName;
	}

	public void setCompetencyLevelName(String competencyLevelName) {
		this.competencyLevelName = competencyLevelName;
	}

	public Long getServiceDisciplineId() {
		return serviceDisciplineId;
	}

	public void setServiceDisciplineId(Long serviceDisciplineId) {
		this.serviceDisciplineId = serviceDisciplineId;
	}

/***	public ServiceDiscipline getServiceDiscipline() {
		return serviceDiscipline;
	}

	public void setServiceDiscipline(ServiceDiscipline serviceDiscipline) {
		this.serviceDiscipline = serviceDiscipline;
	} ***/

	public String getServiceDisciplineCode() {
		return serviceDisciplineCode;
	}

	public void setServiceDisciplineCode(String serviceDisciplineCode) {
		this.serviceDisciplineCode = serviceDisciplineCode;
	}

/***	public ServiceDiscipline getServiceDiscipline() {
		return serviceDiscipline;
	}

	public void setServiceDiscipline(ServiceDiscipline serviceDiscipline) {
		this.serviceDiscipline = serviceDiscipline;
	} ***/

	public String getServiceDisciplineName() {
		return serviceDisciplineName;
	}

	public void setServiceDisciplineName(String serviceDisciplineName) {
		this.serviceDisciplineName = serviceDisciplineName;
	}

	public String getRoleOnAProjectName() {
		return roleOnAProjectName;
	}

	public void setRoleOnAProjectName(String roleOnAProjectName) {
		this.roleOnAProjectName = roleOnAProjectName;
	}

	public String getCombinedName() {
		return combinedName;
	}

	public void setCombinedName(String combinedName) {
		this.combinedName = combinedName;
	}

	public String getsdParentName() {
		return sdParentName;
	}

	public void setsdParentName(String sdParentName) {
		this.sdParentName = sdParentName;
	}

	public String getsdGrandParentName() {
		return sdGrandParentName;
	}

	public void setsdGrandParentName(String sdGrandParentName) {
		this.sdGrandParentName = sdGrandParentName;
	}

	public String getsdIndustryName() {
		return sdIndustryName;
	}

	public void setsdIndustryName(String sdIndustryName) {
		this.sdIndustryName = sdIndustryName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "individualSdRoleId" }       //0 MySql-TableName: VIndividualSdRole
		,{ data: "individualId" }             //1
		,{ data: "sdRoleId" }                 //2
		,{ data: "competencyLevelId" }      //3
		,{ data: "yearExperience" }           //4
		,{ data: "participantId" }            //5
		,{ data: "competencyLevelName" }      //6
		,{ data: "serviceDisciplineId" }      //7
		,{ data: "serviceDisciplineCode" }    //8
		,{ data: "serviceDisciplineName" }    //9
		,{ data: "roleOnAProjectName" }       //10
		,{ data: "combinedName" }             //11
		,{ data: "sdParentName" }             //12
		,{ data: "sdGrandParentName" }        //13
		,{ data: "sdIndustryName" }           //14
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 5, 7, 8]
		}
	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "individualSdRoleId", name: "IndividualSdRoleId" }         //0 MySql-TableName: VIndividualSdRole
		,{ data: "individualId", name: "IndividualId" }                     //1
		,{ data: "sdRoleId", name: "SdRoleId" }                             //2
		,{ data: "competencyLevelId", name: "CompetencyLevelId" }       //3
		,{ data: "yearExperience", name: "YearExperience" }                 //4
		,{ data: "participantId", name: "ParticipantId" }                   //5
		,{ data: "competencyLevelName", name: "CompetencyLevelName" }       //6
		,{ data: "serviceDisciplineId", name: "ServiceDisciplineId" }       //7
		,{ data: "serviceDisciplineCode", name: "ServiceDisciplineCode" }   //8
		,{ data: "serviceDisciplineName", name: "ServiceDisciplineName" }   //9
		,{ data: "roleOnAProjectName", name: "RoleOnAProjectName" }         //10
		,{ data: "combinedName", name: "CombinedName" }                     //11
		,{ data: "sdParentName", name: "sdParentName" }                     //12
		,{ data: "sdGrandParentName", name: "sdGrandParentName" }           //13
		,{ data: "sdIndustryName", name: "sdIndustryName" }                 //14
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 5, 7, 8]
		}
	];







Vir 'n Save Data function sien IndividualSdRole.java






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: VIndividualSdRole										   (js3Str)
		$("#isdIndividualSdRoleId").val(data.individualSdRoleId);         //0
		$("#isdIndividualId").val(data.individualId);                     //1
		populateSelect("isdIndividualId",                                 //name of html select element that will be populated
				"/rest/ignite/v1/individual/find-all",                    //url
				"individualId",                                           //the value that must be saved (ReferencedColumnName)
				"firstName",                                              //shown to user (usually a Name column)
				data.individualId,                                        //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#isdSdRoleId").val(data.sdRoleId);                             //2
		populateSelect("isdSdRoleId",                                     //name of html select element that will be populated
				"/rest/ignite/v1/sd-role/find-all",                       //url
				"sdRoleId",                                               //the value that must be saved (ReferencedColumnName)
				"lastUpdateUserName",                                     //shown to user (usually a Name column)
				data.sdRoleId,                                            //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#isdCompetencyLevelId").val(data.competencyLevelId);       //3
		populateSelect("isdCompetencyLevelId",                          //name of html select element that will be populated
				"/rest/ignite/v1/competency-level/find-all",              //url
				"competencyLevelId",                                    //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.competencyLevelId,                                 //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#isdYearExperience").val(data.yearExperience);                 //4
		$("#isdParticipantId").val(data.participantId);                   //5
		populateSelect("isdParticipantId",                                //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantId,                                       //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#isdCompetencyLevelName").val(data.competencyLevelName);       //6
		$("#isdServiceDisciplineId").val(data.serviceDisciplineId);       //7
		populateSelect("isdServiceDisciplineId",                          //name of html select element that will be populated
				"/rest/ignite/v1/service-discipline/find-all",            //url
				"serviceDisciplineId",                                    //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.serviceDisciplineId,                                 //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#isdServiceDisciplineCode").val(data.serviceDisciplineCode);   //8
		populateSelect("isdServiceDisciplineCode",                        //name of html select element that will be populated
				"/rest/ignite/v1/service-discipline/find-all",            //url
				"serviceDisciplineCode",                                  //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.serviceDisciplineCode,                               //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#isdServiceDisciplineName").val(data.serviceDisciplineName);   //9
		$("#isdRoleOnAProjectName").val(data.roleOnAProjectName);         //10
		$("#isdCombinedName").val(data.combinedName);                     //11
		$("#isdsdParentName").val(data.sdParentName);                     //12
		$("#isdsdGrandParentName").val(data.sdGrandParentName);           //13
		$("#isdsdIndustryName").val(data.sdIndustryName);                 //14






/**  HTML  om 'n grid te populate
												<th>IndividualSdRoleId</th>          <!--0  MySql-TableName: VIndividualSdRole-->
												<th>IndividualId</th>                <!--1  IndividualId-->
												<th>SdRoleId</th>                    <!--2  SdRoleId-->
												<th>CompetencyLevelId</th>         <!--3  CompetencyLevelId-->
												<th>Year Experience</th>             <!--4  YearExperience-->
												<th>ParticipantId</th>               <!--5  ParticipantId-->
												<th>Competency Level Name</th>       <!--6  CompetencyLevelName-->
												<th>ServiceDisciplineId</th>         <!--7  ServiceDisciplineId-->
												<th>ServiceDisciplineCode</th>       <!--8  ServiceDisciplineCode-->
												<th>Service Discipline Name</th>     <!--9  ServiceDisciplineName-->
												<th>Role On A Project Name</th>      <!--10  RoleOnAProjectName-->
												<th>Combined Name</th>               <!--11  CombinedName-->
												<th>sd Parent Name</th>              <!--12  sdParentName-->
												<th>sd Grand Parent Name</th>        <!--13  sdGrandParentName-->
												<th>sd Industry Name</th>            <!--14  sdIndustryName-->

*/