package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

/** @author Generated by Johannes Marais (JohannesSQL v7.5) **/
/** ******* ********* ** 2023-09-04 14:00:33 ******** *ili* **/
/** ******* ********* ** Ingrid 2023-09-08 ******** *ili* **/

@Entity
@Table(schema = "ig_db", name = "vInvoiceLine")
public class VInvoiceLine implements Serializable {


    private static final long serialVersionUID = 137659380320756910L; /** ID was Generated by Johannes **/

    @Id
	@Column(name = "InvoiceLineId")
	private Long invoiceLineId;

	@Column(name = "InvoiceId")
	private Long invoiceId;

    @Column(name = "ParticipantIdFrom")
	private Long participantIdFrom;

    @Column(name = "ParticipantFrom")
	private String participantFrom;

	@Column(name = "ParticipantIdTo")
	private Long participantIdTo;

    @Column(name = "ParticipantTo")
	private String participantTo;

    @Column(name = "InvoiceNumber")
	private String invoiceNumber;

	@Column(name = "InvoiceAmount")
	private Double invoiceAmount;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "InvoiceDate")
	private Date invoiceDate;

	@Column(name = "ProjectId")
	private Long projectId;

	@Column(name = "ProjectNameText")
	private String projectNameText;

	@Column(name = "LineType")
	private String lineType;

	@Column(name = "RatesMissing")
	private Integer ratesMissing;

	@Column(name = "TotalUnits")
	private Double totalUnits;

	@Column(name = "LineAmount")
	private Double lineAmount;

	@Column(name = "AgreementBetweenParticipantsId")
	private Long agreementBetweenParticipantsId;

	@Column(name = "ProjectNumberOnly")
	private String projectNumberOnly;

	@Column(name = "ProjectTitleOnly")
	private String projectTitleOnly;

	public String getProjectNumberOnly() {
		return projectNumberOnly;
	}

	public void setProjectNumberOnly(String projectNumberOnly) {
		this.projectNumberOnly = projectNumberOnly;
	}

	public String getProjectTitleOnly() {
		return projectTitleOnly;
	}

	public void setProjectTitleOnly(String projectTitleOnly) {
		this.projectTitleOnly = projectTitleOnly;
	}

	public String getParticipantFrom() {
		return participantFrom;
	}

	public void setParticipantFrom(String participantFrom) {
		this.participantFrom = participantFrom;
	}

	public String getParticipantTo() {
		return participantTo;
	}

	public void setParticipantTo(String participantTo) {
		this.participantTo = participantTo;
	}

	public Long getAgreementBetweenParticipantsId() {
		return agreementBetweenParticipantsId;
	}

	public void setAgreementBetweenParticipantsId(Long agreementBetweenParticipantsId) {
		this.agreementBetweenParticipantsId = agreementBetweenParticipantsId;
	}

	public Long getInvoiceLineId() {
		return invoiceLineId;
	}

	public void setInvoiceLineId(Long invoiceLineId) {
		this.invoiceLineId = invoiceLineId;
	}

	public Long getInvoiceId() {
		return invoiceId;
	}

	public void setInvoiceId(Long invoiceId) {
		this.invoiceId = invoiceId;
	}

	public Long getParticipantIdFrom() {
		return participantIdFrom;
	}

	public void setParticipantIdFrom(Long participantIdFrom) {
		this.participantIdFrom = participantIdFrom;
	}

	public Long getParticipantIdTo() {
		return participantIdTo;
	}

	public void setParticipantIdTo(Long participantIdTo) {
		this.participantIdTo = participantIdTo;
	}

	public String getInvoiceNumber() {
		return invoiceNumber;
	}

	public void setInvoiceNumber(String invoiceNumber) {
		this.invoiceNumber = invoiceNumber;
	}

	public Double getInvoiceAmount() {
		return invoiceAmount;
	}

	public void setInvoiceAmount(Double invoiceAmount) {
		this.invoiceAmount = invoiceAmount;
	}

	public Date getInvoiceDate() {
		return invoiceDate;
	}

	public void setInvoiceDate(Date invoiceDate) {
		this.invoiceDate = invoiceDate;
	}

	public Long getProjectId() {
		return projectId;
	}

	public void setProjectId(Long projectId) {
		this.projectId = projectId;
	}

	public String getProjectNameText() {
		return projectNameText;
	}

	public void setProjectNameText(String projectNameText) {
		this.projectNameText = projectNameText;
	}

	public String getLineType() {
		return lineType;
	}

	public void setLineType(String lineType) {
		this.lineType = lineType;
	}

	public Integer getRatesMissing() {
		return ratesMissing;
	}

	public void setRatesMissing(Integer ratesMissing) {
		this.ratesMissing = ratesMissing;
	}

	public Double getTotalUnits() {
		return totalUnits;
	}

	public void setTotalUnits(Double totalUnits) {
		this.totalUnits = totalUnits;
	}

	public Double getLineAmount() {
		return lineAmount;
	}

	public void setLineAmount(Double lineAmount) {
		this.lineAmount = lineAmount;
	}

}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "invoiceId" }                //0 MySql-TableName: VInvoiceLine
		,{ data: "participantIdFrom" }        //1
		,{ data: "participantIdTo" }          //2
		,{ data: "invoiceNumber" }            //3
		,{ data: "invoiceAmount" }            //4
		,{ data: "invoiceDate" }              //5
		,{ data: "invoiceLineId" }            //6
		,{ data: "projectId" }                //7
		,{ data: "projectNameText" }          //8
		,{ data: "lineAmount" }               //9
		,{ data: "description" }              //10
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 6, 7]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [5]
		}
		,{        //for Amounts
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = valueToRand(data);
				}
				return html;
			},
			className: "dt-right",
			targets: [4, 9]
		}
	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "invoiceId", name: "InvoiceId" }                           //0 MySql-TableName: VInvoiceLine
		,{ data: "participantIdFrom", name: "ParticipantIdFrom" }           //1
		,{ data: "participantIdTo", name: "ParticipantIdTo" }               //2
		,{ data: "invoiceNumber", name: "InvoiceNumber" }                   //3
		,{ data: "invoiceAmount", name: "InvoiceAmount" }                   //4
		,{ data: "invoiceDate", name: "InvoiceDate" }                       //5
		,{ data: "invoiceLineId", name: "InvoiceLineId" }                   //6
		,{ data: "projectId", name: "ProjectId" }                           //7
		,{ data: "projectNameText", name: "ProjectNameText" }               //8
		,{ data: "lineAmount", name: "LineAmount" }                         //9
		,{ data: "description", name: "Description" }                       //10
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 6, 7]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [5]
		}
		,{        //for Amounts
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = valueToRand(data);
				}
				return html;
			},
			className: "dt-right",
			targets: [4, 9]
		}
	];







Vir 'n Save Data function sien InvoiceLine.java






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: VInvoiceLine										   (js3Str)
		$("#iliInvoiceId").val(data.invoiceId);                           //0
		$("#iliParticipantIdFrom").val(data.participantIdFrom);           //1
		populateSelect("iliParticipantIdFrom",                            //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantIdFrom,                                   //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#iliParticipantIdTo").val(data.participantIdTo);               //2
		populateSelect("iliParticipantIdTo",                              //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantIdTo,                                     //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#iliInvoiceNumber").val(data.invoiceNumber);                   //3
		$("#iliInvoiceAmount").val((data.invoiceAmount != null) ? "R " + (data.invoiceAmount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$& ') : "");  // Sit spasie in as thousand separator en 2 desimale plekke                   //4
		$("#iliInvoiceDate").datepicker("setDate", data.invoiceDate == null? timestampToString(new Date(), false) : new Date(data.invoiceDate));                       //5
		$("#iliInvoiceLineId").val(data.invoiceLineId);                   //6
		populateSelect("iliInvoiceLineId",                                //name of html select element that will be populated
				"/rest/ignite/v1/invoice-line/find-all",                  //url
				"invoiceLineId",                                          //the value that must be saved (ReferencedColumnName)
				"lastUpdateUserName",                                     //shown to user (usually a Name column)
				data.invoiceLineId,                                       //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#iliProjectId").val(data.projectId);                           //7
		populateSelect("iliProjectId",                                    //name of html select element that will be populated
				"/rest/ignite/v1/project/find-all",                       //url
				"projectId",                                              //the value that must be saved (ReferencedColumnName)
				"lastUpdateUserName",                                     //shown to user (usually a Name column)
				data.projectId,                                           //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#iliProjectNameText").val(data.projectNameText);               //8
		$("#iliLineAmount").val((data.lineAmount != null) ? "R " + (data.lineAmount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$& ') : "");  // Sit spasie in as thousand separator en 2 desimale plekke                         //9
		$("#iliDescription").val(data.description);                       //10






/**  HTML  om 'n grid te populate
												<th>InvoiceId</th>                   <!--0  MySql-TableName: VInvoiceLine-->
												<th>Participant Id From</th>         <!--1  ParticipantIdFrom-->
												<th>Participant Id To</th>           <!--2  ParticipantIdTo-->
												<th>Invoice Number</th>              <!--3  InvoiceNumber-->
												<th>Invoice Amount</th>              <!--4  InvoiceAmount-->
												<th>Invoice Date</th>                <!--5  InvoiceDate-->
												<th>InvoiceLineId</th>               <!--6  InvoiceLineId-->
												<th>ProjectId</th>                   <!--7  ProjectId-->
												<th>Project Name Text</th>           <!--8  ProjectNameText-->
												<th>Line Amount</th>                 <!--9  LineAmount-->
												<th>Description</th>                 <!--10  Description-->

*/