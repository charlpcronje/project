package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

@Entity
@Table(schema = "ig_db", name = "ParticipantBankDetails")
public class ParticipantBankDetails implements Serializable {

    private static final long serialVersionUID = 279264135247002505L; /** ID was Generated by Johannes **/

    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ParticipantBankDetailsId")
	private Long participantBankDetailsId;

	@Column(name = "ParticipantIdOwner")
	private Long participantIdOwner;

	@Column(name = "BankId")
	private Long bankId;

	@Column(name = "AccountTypeId")
	private Long accountTypeId;

	@Column(name = "BranchId")
	private Long branchId;

	@Column(name = "FlagDefault")
	private String flagDefault;

	@Column(name = "Name")
	private String name;

	@Column(name = "Description")
	private String description;

	@Column(name = "AccountHolderName")
	private String accountHolderName;

	@Column(name = "AccountNumber")
	private String accountNumber;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastUpdateTimestamp")
	private Date lastUpdateTimestamp;

	@Column(name = "LastUpdateUserName")
	private String lastUpdateUserName;
	
	public String getFlagDefault() {
		return flagDefault;
	}

	public void setFlagDefault(String flagDefault) {
		this.flagDefault = flagDefault;
	}

	public Long getParticipantBankDetailsId() {
		return participantBankDetailsId;
	}

	public void setParticipantBankDetailsId(Long participantBankDetailsId) {
		this.participantBankDetailsId = participantBankDetailsId;
	}

	public Long getParticipantIdOwner() {
		return participantIdOwner;
	}

	public void setParticipantIdOwner(Long participantIdOwner) {
		this.participantIdOwner = participantIdOwner;
	}

/***	public Participant getParticipantOwner() {
		return participantOwner;
	}

	public void setParticipantOwner(Participant participantOwner) {
		this.participantOwner = participantOwner;
	} ***/

	public Long getBankId() {
		return bankId;
	}

	public void setBankId(Long bankId) {
		this.bankId = bankId;
	}

/***	public Bank getBankOwner() {
		return bankOwner;
	}

	public void setBankOwner(Bank bankOwner) {
		this.bankOwner = bankOwner;
	} ***/

	public Long getAccountTypeId() {
		return accountTypeId;
	}

	public void setAccountTypeId(Long accountTypeId) {
		this.accountTypeId = accountTypeId;
	}

/***	public AccountType getAccountTypeOwner() {
		return accountTypeOwner;
	}

	public void setAccountTypeOwner(AccountType accountTypeOwner) {
		this.accountTypeOwner = accountTypeOwner;
	} ***/

	public Long getBranchId() {
		return branchId;
	}

	public void setBranchId(Long branchId) {
		this.branchId = branchId;
	}

/***	public Branch getBranchOwner() {
		return branchOwner;
	}

	public void setBranchOwner(Branch branchOwner) {
		this.branchOwner = branchOwner;
	} ***/

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getAccountHolderName() {
		return accountHolderName;
	}

	public void setAccountHolderName(String accountHolderName) {
		this.accountHolderName = accountHolderName;
	}

	public String getAccountNumber() {
		return accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	public Date getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		this.lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public String getLastUpdateUserName() {
		return lastUpdateUserName;
	}

	public void setLastUpdateUserName(String lastUpdateUserName) {
		this.lastUpdateUserName = lastUpdateUserName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "participantBankDetailsId" } //0 MySql-TableName: ParticipantBankDetails
		,{ data: "participantIdOwner" }       //1
		,{ data: "bankId" }                   //2
		,{ data: "accountTypeId" }            //3
		,{ data: "branchId" }                 //4
		,{ data: "name" }                     //5
		,{ data: "description" }              //6
		,{ data: "accountHolderName" }        //7
		,{ data: "accountNumber" }            //8
		,{ data: "lastUpdateTimestamp" }      //9
		,{ data: "lastUpdateUserName" }       //10
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 4, 10]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [9]
		}
	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "participantBankDetailsId", name: "ParticipantBankDetailsId" } //0 MySql-TableName: ParticipantBankDetails
		,{ data: "participantIdOwner", name: "ParticipantIdOwner" }         //1
		,{ data: "bankId", name: "BankId" }                                 //2
		,{ data: "accountTypeId", name: "AccountTypeId" }                   //3
		,{ data: "branchId", name: "BranchId" }                             //4
		,{ data: "name", name: "Name" }                                     //5
		,{ data: "description", name: "Description" }                       //6
		,{ data: "accountHolderName", name: "AccountHolderName" }           //7
		,{ data: "accountNumber", name: "AccountNumber" }                   //8
		,{ data: "lastUpdateTimestamp", name: "LastUpdateTimestamp" }       //9
		,{ data: "lastUpdateUserName", name: "LastUpdateUserName" }         //10
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 4, 10]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [9]
		}
	];







Vir 'n Save Data function                        (js2Str)


	var postUrl = "/rest/ignite/v1/participant-bank-details/new";
	var postData = {
		participantBankDetailsId : $("#xxxParticipantBankDetailsId").val() //0 MySql-TableName: ParticipantBankDetails
		,participantIdOwner : $("#xxxParticipantIdOwner").val()                      //1
		,bankId : $("#xxxBankId").val()                                              //2
		,accountTypeId : $("#xxxAccountTypeId").val()                                //3
		,branchId : $("#xxxBranchId").val()                                          //4
		,name : $("#xxxName").val()                                                  //5
		,description : $("#xxxDescription").val()                                    //6
		,accountHolderName : $("#xxxAccountHolderName").val()                        //7
		,accountNumber : $("#xxxAccountNumber").val()                                //8
		,lastUpdateTimestamp : getMsFromDatePicker("xxxLastUpdateTimestamp")         //9
	};

	var errors = "";






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: ParticipantBankDetails										   (js3Str)
		$("#xxxParticipantBankDetailsId").val(data.participantBankDetailsId); //0
		$("#xxxParticipantIdOwner").val(data.participantIdOwner);         //1
		populateSelect("xxxParticipantIdOwner",                           //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantIdOwner,                                  //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxBankId").val(data.bankId);                                 //2
		populateSelect("xxxBankId",                                       //name of html select element that will be populated
				"/rest/ignite/v1/bank/find-all",                          //url
				"bankId",                                                 //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.bankId,                                              //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxAccountTypeId").val(data.accountTypeId);                   //3
		populateSelect("xxxAccountTypeId",                                //name of html select element that will be populated
				"/rest/ignite/v1/account-type/find-all",                  //url
				"accountTypeId",                                          //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.accountTypeId,                                       //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxBranchId").val(data.branchId);                             //4
		populateSelect("xxxBranchId",                                     //name of html select element that will be populated
				"/rest/ignite/v1/branch/find-all",                        //url
				"branchId",                                               //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.branchId,                                            //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxName").val(data.name);                                     //5
		$("#xxxDescription").val(data.description);                       //6
		$("#xxxAccountHolderName").val(data.accountHolderName);           //7
		$("#xxxAccountNumber").val(data.accountNumber);                   //8
		$("#xxxLastUpdateTimestamp").datepicker("setDate", data.lastUpdateTimestamp == null? timestampToString(new Date(), false) : new Date(data.lastUpdateTimestamp));       //9






/**  HTML  om 'n grid te populate
												<th>ParticipantBankDetailsId</th>    <!--0  MySql-TableName: ParticipantBankDetails-->
												<th>ParticipantIdOwner</th>          <!--1  ParticipantIdOwner-->
												<th>BankId</th>                      <!--2  BankId-->
												<th>AccountTypeId</th>               <!--3  AccountTypeId-->
												<th>BranchId</th>                    <!--4  BranchId-->
												<th>Name</th>                        <!--5  Name-->
												<th>Description</th>                 <!--6  Description-->
												<th>Account Holder Name</th>         <!--7  AccountHolderName-->
												<th>Account Number</th>              <!--8  AccountNumber-->
												<th>Last Update Timestamp</th>       <!--9  LastUpdateTimestamp-->
												<th>LastUpdateUserName</th>          <!--10  LastUpdateUserName-->

*/