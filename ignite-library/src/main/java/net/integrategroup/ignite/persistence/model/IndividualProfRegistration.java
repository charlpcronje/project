package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-16 19:51:55 ******** ** **/

@Entity
@Table(schema = "ig_db", name = "IndividualProfRegistration")
public class IndividualProfRegistration implements Serializable {


    private static final long serialVersionUID = 420229072904772268L; /** ID was Generated by Johannes **/


    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "IndividualProfRegistrationId")
	private Long individualProfRegistrationId;

	@Column(name = "IndividualId")
	private Long individualId;

/***	@OneToOne(targetEntity = Individual.class)
	@JoinColumn(name = "IndividualId", referencedColumnName = "IndividualId", nullable = true, insertable = false, updatable = false)
	private Individual individual; ***/

	@Column(name = "ProfessionalInstituteId")
	private Long professionalInstituteId;

/***	@OneToOne(targetEntity = ProfessionalInstitute.class)
	@JoinColumn(name = "ProfessionalInstituteId", referencedColumnName = "ProfessionalInstituteId", nullable = true, insertable = false, updatable = false)
	private ProfessionalInstitute professionalInstitute; ***/

	@Column(name = "YearAccepted")
	private Long yearAccepted;

	@Column(name = "ProfNumber")
	private String profNumber;

	@Column(name = "Description")
	private String description;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastUpdateTimestamp")
	private Date lastUpdateTimestamp;

	@Column(name = "LastUpdateUserName")
	private String lastUpdateUserName;




	public Long getIndividualProfRegistrationId() {
		return individualProfRegistrationId;
	}

	public void setIndividualProfRegistrationId(Long individualProfRegistrationId) {
		this.individualProfRegistrationId = individualProfRegistrationId;
	}

	public Long getIndividualId() {
		return individualId;
	}

	public void setIndividualId(Long individualId) {
		this.individualId = individualId;
	}

/***	public Individual getIndividual() {
		return individual;
	}

	public void setIndividual(Individual individual) {
		this.individual = individual;
	} ***/

	public Long getProfessionalInstituteId() {
		return professionalInstituteId;
	}

	public void setProfessionalInstituteId(Long professionalInstituteId) {
		this.professionalInstituteId = professionalInstituteId;
	}

/***	public ProfessionalInstitute getProfessionalInstitute() {
		return professionalInstitute;
	}

	public void setProfessionalInstitute(ProfessionalInstitute professionalInstitute) {
		this.professionalInstitute = professionalInstitute;
	} ***/

	public Long getYearAccepted() {
		return yearAccepted;
	}

	public void setYearAccepted(Long yearAccepted) {
		this.yearAccepted = yearAccepted;
	}

	public String getProfNumber() {
		return profNumber;
	}

	public void setProfNumber(String profNumber) {
		this.profNumber = profNumber;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Date getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		this.lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public String getLastUpdateUserName() {
		return lastUpdateUserName;
	}

	public void setLastUpdateUserName(String lastUpdateUserName) {
		this.lastUpdateUserName = lastUpdateUserName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "individualProfRegistrationId" } //0 MySql-TableName: IndividualProfRegistration
		,{ data: "individualId" }             //1
		,{ data: "professionalInstituteId" }  //2
		,{ data: "yearAccepted" }             //3
		,{ data: "profNumber" }               //4
		,{ data: "description" }              //5
		,{ data: "lastUpdateTimestamp" }      //6
		,{ data: "lastUpdateUserName" }       //7
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 7]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [6]
		}
	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "individualProfRegistrationId", name: "IndividualProfRegistrationId" } //0 MySql-TableName: IndividualProfRegistration
		,{ data: "individualId", name: "IndividualId" }                     //1
		,{ data: "professionalInstituteId", name: "ProfessionalInstituteId" } //2
		,{ data: "yearAccepted", name: "YearAccepted" }                     //3
		,{ data: "profNumber", name: "ProfNumber" }                         //4
		,{ data: "description", name: "Description" }                       //5
		,{ data: "lastUpdateTimestamp", name: "LastUpdateTimestamp" }       //6
		,{ data: "lastUpdateUserName", name: "LastUpdateUserName" }         //7
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 7]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [6]
		}
	];







Vir 'n Save Data function                        (js2Str)


	var postUrl = "/rest/ignite/v1/individual-prof-registration/new";
	var postData = {
		individualProfRegistrationId : $("#IndividualProfRegistrationId").val() //0 MySql-TableName: IndividualProfRegistration
		,individualId : $("#IndividualId").val()                                  //1
		,professionalInstituteId : $("#ProfessionalInstituteId").val()            //2
		,yearAccepted : $("#YearAccepted").val()                                  //3
		,profNumber : $("#ProfNumber").val()                                      //4
		,description : $("#Description").val()                                    //5
		,lastUpdateTimestamp : getMsFromDatePicker("LastUpdateTimestamp")         //6
	};

	var errors = "";






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: IndividualProfRegistration										   (js3Str)
		$("#IndividualProfRegistrationId").val(data.individualProfRegistrationId); //0
		$("#IndividualId").val(data.individualId);                     //1
		populateSelect("IndividualId",                                    //name of html select element that will be populated
				"/rest/ignite/v1/individual/find-all",                    //url
				"individualId",                                           //the value that must be saved (ReferencedColumnName)
				"firstName",                                              //shown to user (usually a Name column)
				data.individualId,                                        //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#ProfessionalInstituteId").val(data.professionalInstituteId); //2
		populateSelect("ProfessionalInstituteId",                         //name of html select element that will be populated
				"/rest/ignite/v1/professional-institute/find-all",        //url
				"professionalInstituteId",                                //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.professionalInstituteId,                             //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		),

		$("#YearAccepted").val(data.yearAccepted);                     //3
		$("#ProfNumber").val(data.profNumber);                         //4
		$("#Description").val(data.description);                       //5
		$("#LastUpdateTimestamp").datepicker("setDate", data.lastUpdateTimestamp == null? timestampToString(new Date(), false) : new Date(data.lastUpdateTimestamp));       //6






/**  HTML  om 'n grid te populate
												<th>IndividualProfRegistrationId</th> <!--0  MySql-TableName: IndividualProfRegistration-->
												<th>IndividualId</th>                <!--1  IndividualId-->
												<th>ProfessionalInstituteId</th>     <!--2  ProfessionalInstituteId-->
												<th>Year Accepted</th>               <!--3  YearAccepted-->
												<th>Prof Number</th>                 <!--4  ProfNumber-->
												<th>Description</th>                 <!--5  Description-->
												<th>Last Update Timestamp</th>       <!--6  LastUpdateTimestamp-->
												<th>LastUpdateUserName</th>          <!--7  LastUpdateUserName-->

*/