package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-11-26 16:29:23 ******** *xxx* **/

@Entity
@Table(schema = "ig_db", name = "vProjectParticipantList")
public class VProjectParticipantList implements Serializable {


    private static final long serialVersionUID = 929906301110635754L; /** ID was Generated by Johannes **/


    @Id
	@Column(name = "ProjectParticipantId")
	private Long projectParticipantId;

	@Column(name = "ParticipantId")
	private Long participantId;

/***	@OneToOne(targetEntity = Participant.class)
	@JoinColumn(name = "ParticipantId", referencedColumnName = "ParticipantId", nullable = true, insertable = false, updatable = false)
	private Participant participant; ***/

	@Column(name = "ProjectId")
	private Long projectId;

/***	@OneToOne(targetEntity = Project.class)
	@JoinColumn(name = "ProjectId", referencedColumnName = "ProjectId", nullable = true, insertable = false, updatable = false)
	private Project project; ***/

	@Column(name = "ProjectIdParent")
	private Long projectIdParent;

/***	@OneToOne(targetEntity = Project.class)
	@JoinColumn(name = "ProjectIdParent", referencedColumnName = "ProjectId", nullable = true, insertable = false, updatable = false)
	private Project projectParent; ***/

	@Column(name = "ParticipantIdHost")
	private Long participantIdHost;

/***	@OneToOne(targetEntity = Participant.class)
	@JoinColumn(name = "ParticipantIdHost", referencedColumnName = "ParticipantId", nullable = true, insertable = false, updatable = false)
	private Participant participantHost; ***/

	@Column(name = "ParticipantNameHost")
	private String participantNameHost;

	@Column(name = "ProjectParticipantIdLevel1")
	private Long projectParticipantIdLevel1;

/***	@OneToOne(targetEntity = ProjectParticipant.class)
	@JoinColumn(name = "ProjectParticipantIdLevel1", referencedColumnName = "ProjectParticipantId", nullable = true, insertable = false, updatable = false)
	private ProjectParticipant projectParticipantLevel1; ***/

	@Column(name = "ParticipantIdLevel1")
	private Long participantIdLevel1;

/***	@OneToOne(targetEntity = Participant.class)
	@JoinColumn(name = "ParticipantIdLevel1", referencedColumnName = "ParticipantId", nullable = true, insertable = false, updatable = false)
	private Participant participantLevel1; ***/

	@Column(name = "ParticipantNameLevel1")
	private String participantNameLevel1;

	@Column(name = "IndividualIdProjectAdmin")
	private Long individualIdProjectAdmin;

/***	@OneToOne(targetEntity = Individual.class)
	@JoinColumn(name = "IndividualIdProjectAdmin", referencedColumnName = "IndividualId", nullable = true, insertable = false, updatable = false)
	private Individual individualProjectAdmin; ***/

	@Column(name = "FlagSustenanceProject")
	private String flagSustenanceProject;

	@Column(name = "ProjectNumberBigInt")
	private Long projectNumberBigInt;

	@Column(name = "ParentProjectNumberBigInt")
	private Long parentProjectNumberBigInt;

	@Column(name = "ProjectNumberText")
	private String projectNumberText;

	@Column(name = "ProjectNameText")
	private String projectNameText;

	@Column(name = "SubProjNumber")
	private String subProjNumber;

	@Column(name = "Title")
	private String title;

	@Column(name = "Description")
	private String description;

	@Column(name = "IsActive")
	private String isActive;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "StartDate")
	private Date startDate;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "CompletionDate")
	private Date completionDate;

	@Column(name = "ProjectParentNameText")
	private String projectParentNameText;

	@Column(name = "IndividualNameProjectAdmin")
	private String individualNameProjectAdmin;

	@Column(name = "ProjectStageCurrent")
	private String projectStageCurrent;




	public Long getProjectParticipantId() {
		return projectParticipantId;
	}

	public void setProjectParticipantId(Long projectParticipantId) {
		this.projectParticipantId = projectParticipantId;
	}

	public Long getParticipantId() {
		return participantId;
	}

	public void setParticipantId(Long participantId) {
		this.participantId = participantId;
	}

/***	public Participant getParticipant() {
		return participant;
	}

	public void setParticipant(Participant participant) {
		this.participant = participant;
	} ***/

	public Long getProjectId() {
		return projectId;
	}

	public void setProjectId(Long projectId) {
		this.projectId = projectId;
	}

/***	public Project getProject() {
		return project;
	}

	public void setProject(Project project) {
		this.project = project;
	} ***/

	public Long getProjectIdParent() {
		return projectIdParent;
	}

	public void setProjectIdParent(Long projectIdParent) {
		this.projectIdParent = projectIdParent;
	}

/***	public Project getProjectParent() {
		return projectParent;
	}

	public void setProjectParent(Project projectParent) {
		this.projectParent = projectParent;
	} ***/

	public Long getParticipantIdHost() {
		return participantIdHost;
	}

	public void setParticipantIdHost(Long participantIdHost) {
		this.participantIdHost = participantIdHost;
	}

/***	public Participant getParticipantHost() {
		return participantHost;
	}

	public void setParticipantHost(Participant participantHost) {
		this.participantHost = participantHost;
	} ***/

	public String getParticipantNameHost() {
		return participantNameHost;
	}

	public void setParticipantNameHost(String participantNameHost) {
		this.participantNameHost = participantNameHost;
	}

	public Long getProjectParticipantIdLevel1() {
		return projectParticipantIdLevel1;
	}

	public void setProjectParticipantIdLevel1(Long projectParticipantIdLevel1) {
		this.projectParticipantIdLevel1 = projectParticipantIdLevel1;
	}

/***	public ProjectParticipant getProjectParticipantLevel1() {
		return projectParticipantLevel1;
	}

	public void setProjectParticipantLevel1(ProjectParticipant projectParticipantLevel1) {
		this.projectParticipantLevel1 = projectParticipantLevel1;
	} ***/

	public Long getParticipantIdLevel1() {
		return participantIdLevel1;
	}

	public void setParticipantIdLevel1(Long participantIdLevel1) {
		this.participantIdLevel1 = participantIdLevel1;
	}

/***	public Participant getParticipantLevel1() {
		return participantLevel1;
	}

	public void setParticipantLevel1(Participant participantLevel1) {
		this.participantLevel1 = participantLevel1;
	} ***/

	public String getParticipantNameLevel1() {
		return participantNameLevel1;
	}

	public void setParticipantNameLevel1(String participantNameLevel1) {
		this.participantNameLevel1 = participantNameLevel1;
	}

	public Long getIndividualIdProjectAdmin() {
		return individualIdProjectAdmin;
	}

	public void setIndividualIdProjectAdmin(Long individualIdProjectAdmin) {
		this.individualIdProjectAdmin = individualIdProjectAdmin;
	}

/***	public Individual getIndividualProjectAdmin() {
		return individualProjectAdmin;
	}

	public void setIndividualProjectAdmin(Individual individualProjectAdmin) {
		this.individualProjectAdmin = individualProjectAdmin;
	} ***/

	public String getFlagSustenanceProject() {
		return flagSustenanceProject;
	}

	public void setFlagSustenanceProject(String flagSustenanceProject) {
		this.flagSustenanceProject = flagSustenanceProject;
	}

	public Long getProjectNumberBigInt() {
		return projectNumberBigInt;
	}

	public void setProjectNumberBigInt(Long projectNumberBigInt) {
		this.projectNumberBigInt = projectNumberBigInt;
	}

	public Long getParentProjectNumberBigInt() {
		return parentProjectNumberBigInt;
	}

	public void setParentProjectNumberBigInt(Long parentProjectNumberBigInt) {
		this.parentProjectNumberBigInt = parentProjectNumberBigInt;
	}

	public String getProjectNumberText() {
		return projectNumberText;
	}

	public void setProjectNumberText(String projectNumberText) {
		this.projectNumberText = projectNumberText;
	}

	public String getProjectNameText() {
		return projectNameText;
	}

	public void setProjectNameText(String projectNameText) {
		this.projectNameText = projectNameText;
	}

	public String getSubProjNumber() {
		return subProjNumber;
	}

	public void setSubProjNumber(String subProjNumber) {
		this.subProjNumber = subProjNumber;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getIsActive() {
		return isActive;
	}

	public void setIsActive(String isActive) {
		this.isActive = isActive;
	}

	public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Date getCompletionDate() {
		return completionDate;
	}

	public void setCompletionDate(Date completionDate) {
		this.completionDate = completionDate;
	}

	public String getProjectParentNameText() {
		return projectParentNameText;
	}

	public void setProjectParentNameText(String projectParentNameText) {
		this.projectParentNameText = projectParentNameText;
	}

	public String getIndividualNameProjectAdmin() {
		return individualNameProjectAdmin;
	}

	public void setIndividualNameProjectAdmin(String individualNameProjectAdmin) {
		this.individualNameProjectAdmin = individualNameProjectAdmin;
	}

	public String getProjectStageCurrent() {
		return projectStageCurrent;
	}

	public void setProjectStageCurrent(String projectStageCurrent) {
		this.projectStageCurrent = projectStageCurrent;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "projectParticipantId" }     //0 MySql-TableName: VProjectParticipantList
		,{ data: "participantId" }            //1
		,{ data: "projectId" }                //2
		,{ data: "projectIdParent" }          //3
		,{ data: "participantIdHost" }        //4
		,{ data: "participantNameHost" }      //5
		,{ data: "projectParticipantIdLevel1" } //6
		,{ data: "participantIdLevel1" }      //7
		,{ data: "participantNameLevel1" }    //8
		,{ data: "individualIdProjectAdmin" } //9
		,{ data: "flagSustenanceProject" }    //10
		,{ data: "projectNumberBigInt" }      //11
		,{ data: "parentProjectNumberBigInt" } //12
		,{ data: "projectNumberText" }        //13
		,{ data: "projectNameText" }          //14
		,{ data: "subProjNumber" }            //15
		,{ data: "title" }                    //16
		,{ data: "description" }              //17
		,{ data: "isActive" }                 //18
		,{ data: "startDate" }                //19
		,{ data: "completionDate" }           //20
		,{ data: "projectParentNameText" }    //21
		,{ data: "individualNameProjectAdmin" } //22
		,{ data: "projectStageCurrent" }      //23
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 4, 6, 7, 9]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [19, 20]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.flagSustenanceProject == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[10]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.isActive == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[18]
		}

	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "projectParticipantId", name: "ProjectParticipantId" }     //0 MySql-TableName: VProjectParticipantList
		,{ data: "participantId", name: "ParticipantId" }                   //1
		,{ data: "projectId", name: "ProjectId" }                           //2
		,{ data: "projectIdParent", name: "ProjectIdParent" }               //3
		,{ data: "participantIdHost", name: "ParticipantIdHost" }           //4
		,{ data: "participantNameHost", name: "ParticipantNameHost" }       //5
		,{ data: "projectParticipantIdLevel1", name: "ProjectParticipantIdLevel1" } //6
		,{ data: "participantIdLevel1", name: "ParticipantIdLevel1" }       //7
		,{ data: "participantNameLevel1", name: "ParticipantNameLevel1" }   //8
		,{ data: "individualIdProjectAdmin", name: "IndividualIdProjectAdmin" } //9
		,{ data: "flagSustenanceProject", name: "FlagSustenanceProject" }   //10
		,{ data: "projectNumberBigInt", name: "ProjectNumberBigInt" }       //11
		,{ data: "parentProjectNumberBigInt", name: "ParentProjectNumberBigInt" } //12
		,{ data: "projectNumberText", name: "ProjectNumberText" }           //13
		,{ data: "projectNameText", name: "ProjectNameText" }               //14
		,{ data: "subProjNumber", name: "SubProjNumber" }                   //15
		,{ data: "title", name: "Title" }                                   //16
		,{ data: "description", name: "Description" }                       //17
		,{ data: "isActive", name: "IsActive" }                             //18
		,{ data: "startDate", name: "StartDate" }                           //19
		,{ data: "completionDate", name: "CompletionDate" }                 //20
		,{ data: "projectParentNameText", name: "ProjectParentNameText" }   //21
		,{ data: "individualNameProjectAdmin", name: "IndividualNameProjectAdmin" } //22
		,{ data: "projectStageCurrent", name: "ProjectStageCurrent" }       //23
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 3, 4, 6, 7, 9]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [19, 20]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.flagSustenanceProject == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[10]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.isActive == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[18]
		}


	];







Vir 'n Save Data function sien ProjectParticipantList.java






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: VProjectParticipantList										   (js3Str)
		$("#xxxProjectParticipantId").val(data.projectParticipantId);     //0
		$("#xxxParticipantId").val(data.participantId);                   //1
		populateSelect("xxxParticipantId",                                //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantId,                                       //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxProjectId").val(data.projectId);                           //2
		populateSelect("xxxProjectId",                                    //name of html select element that will be populated
				"/rest/ignite/v1/project/find-all",                       //url
				"projectId",                                              //the value that must be saved (ReferencedColumnName)
				"lastUpdateUserName",                                     //shown to user (usually a Name column)
				data.projectId,                                           //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxProjectIdParent").val(data.projectIdParent);               //3
		populateSelect("xxxProjectIdParent",                              //name of html select element that will be populated
				"/rest/ignite/v1/project/find-all",                       //url
				"projectId",                                              //the value that must be saved (ReferencedColumnName)
				"lastUpdateUserName",                                     //shown to user (usually a Name column)
				data.projectIdParent,                                     //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxParticipantIdHost").val(data.participantIdHost);           //4
		populateSelect("xxxParticipantIdHost",                            //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantIdHost,                                   //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxParticipantNameHost").val(data.participantNameHost);       //5
		$("#xxxProjectParticipantIdLevel1").val(data.projectParticipantIdLevel1); //6
		populateSelect("xxxProjectParticipantIdLevel1",                   //name of html select element that will be populated
				"/rest/ignite/v1/project-participant/find-all",           //url
				"projectParticipantId",                                   //the value that must be saved (ReferencedColumnName)
				"lastUpdateUserName",                                     //shown to user (usually a Name column)
				data.projectParticipantIdLevel1,                          //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxParticipantIdLevel1").val(data.participantIdLevel1);       //7
		populateSelect("xxxParticipantIdLevel1",                          //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantIdLevel1,                                 //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxParticipantNameLevel1").val(data.participantNameLevel1);   //8
		$("#xxxIndividualIdProjectAdmin").val(data.individualIdProjectAdmin); //9
		populateSelect("xxxIndividualIdProjectAdmin",                     //name of html select element that will be populated
				"/rest/ignite/v1/individual/find-all",                    //url
				"individualId",                                           //the value that must be saved (ReferencedColumnName)
				"firstName",                                              //shown to user (usually a Name column)
				data.individualIdProjectAdmin,                            //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxFlagSustenanceProject").val(data.flagSustenanceProject);   //10    use one of these
		$("#xxxFlagSustenanceProject").prop("checked", data.flagSustenanceProject == "Y"); //10    use one of these
		$("#xxxProjectNumberBigInt").val(data.projectNumberBigInt);       //11
		$("#xxxParentProjectNumberBigInt").val(data.parentProjectNumberBigInt); //12
		$("#xxxProjectNumberText").val(data.projectNumberText);           //13
		$("#xxxProjectNameText").val(data.projectNameText);               //14
		$("#xxxSubProjNumber").val(data.subProjNumber);                   //15
		$("#xxxTitle").val(data.title);                                   //16
		$("#xxxDescription").val(data.description);                       //17
		$("#xxxIsActive").val(data.isActive);                             //18    use one of these
		$("#xxxIsActive").prop("checked", data.isActive == "Y");          //18    use one of these
		$("#xxxStartDate").datepicker("setDate", data.startDate == null? timestampToString(new Date(), false) : new Date(data.startDate));                           //19
		$("#xxxCompletionDate").datepicker("setDate", data.completionDate == null? timestampToString(new Date(), false) : new Date(data.completionDate));                 //20
		$("#xxxProjectParentNameText").val(data.projectParentNameText);   //21
		$("#xxxIndividualNameProjectAdmin").val(data.individualNameProjectAdmin); //22
		$("#xxxProjectStageCurrent").val(data.projectStageCurrent);       //23






/**  HTML  om 'n grid te populate
												<th>ProjectParticipantId</th>        <!--0  MySql-TableName: VProjectParticipantList-->
												<th>ParticipantId</th>               <!--1  ParticipantId-->
												<th>ProjectId</th>                   <!--2  ProjectId-->
												<th>Project Id Parent</th>           <!--3  ProjectIdParent-->
												<th>Participant Id Host</th>         <!--4  ParticipantIdHost-->
												<th>Participant Name Host</th>       <!--5  ParticipantNameHost-->
												<th>Project Participant Id Level1</th> <!--6  ProjectParticipantIdLevel1-->
												<th>Participant Id Level1</th>       <!--7  ParticipantIdLevel1-->
												<th>Participant Name Level1</th>     <!--8  ParticipantNameLevel1-->
												<th>Individual Id Project Admin</th> <!--9  IndividualIdProjectAdmin-->
												<th>Sustenance Project</th>          <!--10  FlagSustenanceProject-->
												<th>Project Number Big Int</th>      <!--11  ProjectNumberBigInt-->
												<th>Parent Project Number Big Int</th> <!--12  ParentProjectNumberBigInt-->
												<th>Project Number Text</th>         <!--13  ProjectNumberText-->
												<th>Project Name Text</th>           <!--14  ProjectNameText-->
												<th>Sub Proj Number</th>             <!--15  SubProjNumber-->
												<th>Title</th>                       <!--16  Title-->
												<th>Description</th>                 <!--17  Description-->
												<th>Is Active</th>                   <!--18  IsActive-->
												<th>Start Date</th>                  <!--19  StartDate-->
												<th>Completion Date</th>             <!--20  CompletionDate-->
												<th>Project Parent Name Text</th>    <!--21  ProjectParentNameText-->
												<th>Individual Name Project Admin</th> <!--22  IndividualNameProjectAdmin-->
												<th>Project Stage Current</th>       <!--23  ProjectStageCurrent-->

*/