package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;

/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-10-25 18:51:01 ******** *xxx* **/

@Entity
@Table(schema = "ig_db", name = "IndividualCompetency")
public class IndividualCompetency implements Serializable {


    private static final long serialVersionUID = 845235425736361981L; /** ID was Generated by Johannes **/


    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "IndividualCompetencyId")
	private Long individualCompetencyId;

	@Column(name = "IndividualSdRoleId")
	private Long individualSdRoleId;

/***	@OneToOne(targetEntity = IndividualSdRole.class)
	@JoinColumn(name = "IndividualSdRoleId", referencedColumnName = "IndividualSdRoleId", nullable = true, insertable = false, updatable = false)
	private IndividualSdRole individualSdRole; ***/

	@Column(name = "CompetencyLevelId")
	private Long competencyLevelId;

/***	@OneToOne(targetEntity = CompetencyLevel.class)
	@JoinColumn(name = "CompetencyLevelId", referencedColumnName = "CompetencyLevelId", nullable = true, insertable = false, updatable = false)
	private CompetencyLevel competencyLevel; ***/

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastUpdateTimestamp")
	private Date lastUpdateTimestamp;

	@Column(name = "LastUpdateUserName")
	private String lastUpdateUserName;




	public Long getIndividualCompetencyId() {
		return individualCompetencyId;
	}

	public void setIndividualCompetencyId(Long individualCompetencyId) {
		this.individualCompetencyId = individualCompetencyId;
	}

	public Long getIndividualSdRoleId() {
		return individualSdRoleId;
	}

	public void setIndividualSdRoleId(Long individualSdRoleId) {
		this.individualSdRoleId = individualSdRoleId;
	}

/***	public IndividualSdRole getIndividualSdRole() {
		return individualSdRole;
	}

	public void setIndividualSdRole(IndividualSdRole individualSdRole) {
		this.individualSdRole = individualSdRole;
	} ***/

	public Long getCompetencyLevelId() {
		return competencyLevelId;
	}

	public void setCompetencyLevelId(Long competencyLevelId) {
		this.competencyLevelId = competencyLevelId;
	}

/***	public CompetencyLevel getCompetencyLevel() {
		return competencyLevel;
	}

	public void setCompetencyLevel(CompetencyLevel competencyLevel) {
		this.competencyLevel = competencyLevel;
	} ***/

	public Date getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		this.lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public String getLastUpdateUserName() {
		return lastUpdateUserName;
	}

	public void setLastUpdateUserName(String lastUpdateUserName) {
		this.lastUpdateUserName = lastUpdateUserName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "individualCompetencyId" }   //0 MySql-TableName: IndividualCompetency
		,{ data: "individualSdRoleId" }       //1
		,{ data: "competencyLevelId" }        //2
		,{ data: "lastUpdateTimestamp" }      //3
		,{ data: "lastUpdateUserName" }       //4
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 2, 4]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [3]
		}
	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "individualCompetencyId", name: "IndividualCompetencyId" } //0 MySql-TableName: IndividualCompetency
		,{ data: "individualSdRoleId", name: "IndividualSdRoleId" }         //1
		,{ data: "competencyLevelId", name: "CompetencyLevelId" }           //2
		,{ data: "lastUpdateTimestamp", name: "LastUpdateTimestamp" }       //3
		,{ data: "lastUpdateUserName", name: "LastUpdateUserName" }         //4
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 2, 4]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [3]
		}
	];







Vir 'n Save Data function                        (js2Str)


	var postUrl = "/rest/ignite/v1/individual-competency/new";
	var postData = {
		individualCompetencyId : $("#xxxIndividualCompetencyId").val()   //0 MySql-TableName: IndividualCompetency
		,individualSdRoleId : $("#xxxIndividualSdRoleId").val()                      //1
		,competencyLevelId : $("#xxxCompetencyLevelId").val()                        //2
		,lastUpdateTimestamp : getMsFromDatePicker("xxxLastUpdateTimestamp")         //3
	};

	var errors = "";






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: IndividualCompetency										   (js3Str)
		$("#xxxIndividualCompetencyId").val(data.individualCompetencyId); //0
		$("#xxxIndividualSdRoleId").val(data.individualSdRoleId);         //1
		populateSelect("xxxIndividualSdRoleId",                           //name of html select element that will be populated
				"/rest/ignite/v1/individual-sd-role/find-all",            //url
				"individualSdRoleId",                                     //the value that must be saved (ReferencedColumnName)
				"lastUpdateUserName",                                     //shown to user (usually a Name column)
				data.individualSdRoleId,                                  //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxCompetencyLevelId").val(data.competencyLevelId);           //2
		populateSelect("xxxCompetencyLevelId",                            //name of html select element that will be populated
				"/rest/ignite/v1/competency-level/find-all",              //url
				"competencyLevelId",                                      //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.competencyLevelId,                                   //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxLastUpdateTimestamp").datepicker("setDate", data.lastUpdateTimestamp == null? timestampToString(new Date(), false) : new Date(data.lastUpdateTimestamp));       //3






/**  HTML  om 'n grid te populate
												<th>IndividualCompetencyId</th>      <!--0  MySql-TableName: IndividualCompetency-->
												<th>IndividualSdRoleId</th>          <!--1  IndividualSdRoleId-->
												<th>CompetencyLevelId</th>           <!--2  CompetencyLevelId-->
												<th>Last Update Timestamp</th>       <!--3  LastUpdateTimestamp-->
												<th>LastUpdateUserName</th>          <!--4  LastUpdateUserName-->

*/