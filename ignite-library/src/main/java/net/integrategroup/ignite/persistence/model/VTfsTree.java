package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/** @author  Johannes Marais (JohannesSQL v7.7) **/
/** ******* ***** 2023-11-01 10:02:23  @OneToMany is used for a Tree.  Don't overwrite this! **/

@Entity
@Table(schema = "ig_db", name = "vTfsTree")
public class VTfsTree implements Serializable {


    private static final long serialVersionUID = 950847240843038165L; /** ID was Generated by Johannes **/


    @Id
	@Column(name = "TypicalFolderStructureId")
	private Long typicalFolderStructureId;

	@Column(name = "TfsName")
	private String tfsName;

	@Column(name = "Level")
	private Long level;
	
	@Column(name = "OrderNumber")
	private Long orderNumber;

	@Column(name = "PerSdFlag")
	private String perSdFlag;

	@Column(name = "Description")
	private String decription;
	
	@Column(name = "ServiceDisciplineIdIndustry")
	private Long serviceDisciplineIdIndustry;
	
	@Column(name = "TypicalFolderStructureIdParent")
	private Long typicalFolderStructureIdParent;

	@OneToMany(targetEntity = VTfsTree.class, fetch = FetchType.EAGER)
	@JoinColumn(name = "TypicalFolderStructureIdParent", referencedColumnName = "TypicalFolderStructureId", nullable = true, insertable = false, updatable = false)
	private List<VTfsTree> children; 

	@Column(name = "ParentName")
	private String parentName;

	@Column(name = "ParentPerSdFlag")
	private String parentPerSdFlag;

	@Column(name = "AnyChildren")
	private String anyChildren;




	public Long getTypicalFolderStructureId() {
		return typicalFolderStructureId;
	}

	public void setTypicalFolderStructureId(Long typicalFolderStructureId) {
		this.typicalFolderStructureId = typicalFolderStructureId;
	}

	public String getTfsName() {
		return tfsName;
	}

	public void setTfsName(String tfsName) {
		this.tfsName = tfsName;
	}

	public Long getLevel() {
		return level;
	}

	public void setLevel(Long level) {
		this.level = level;
	}
	
	public Long getOrderNumber() {
		return orderNumber;
	}

	public void setOrderNumber(Long orderNumber) {
		this.orderNumber = orderNumber;
	}

	public String getDecription() {
		return decription;
	}

	public void setDecription(String decription) {
		this.decription = decription;
	}

	public List<VTfsTree> getChildren() {
		return children;
	}

	public void setChildren(List<VTfsTree> children) {
		this.children = children;
	}



	public String getPerSdFlag() {
		return perSdFlag;
	}

	public void setPerSdFlag(String perSdFlag) {
		this.perSdFlag = perSdFlag;
	}

	public Long getTypicalFolderStructureIdParent() {
		return typicalFolderStructureIdParent;
	}

	public void setTypicalFolderStructureIdParent(Long typicalFolderStructureIdParent) {
		this.typicalFolderStructureIdParent = typicalFolderStructureIdParent;
	}

public Long getServiceDisciplineIdIndustry() {
		return serviceDisciplineIdIndustry;
	}

	public void setServiceDisciplineIdIndustry(Long serviceDisciplineIdIndustry) {
		this.serviceDisciplineIdIndustry = serviceDisciplineIdIndustry;
	}

/***	public TypicalFolderStructure getTypicalFolderStructureParent() {
		return typicalFolderStructureParent;
	}

	public void setTypicalFolderStructureParent(TypicalFolderStructure typicalFolderStructureParent) {
		this.typicalFolderStructureParent = typicalFolderStructureParent;
	} ***/

	public String getParentName() {
		return parentName;
	}

	public void setParentName(String parentName) {
		this.parentName = parentName;
	}

	public String getParentPerSdFlag() {
		return parentPerSdFlag;
	}

	public void setParentPerSdFlag(String parentPerSdFlag) {
		this.parentPerSdFlag = parentPerSdFlag;
	}

	public String getAnyChildren() {
		return anyChildren;
	}

	public void setAnyChildren(String anyChildren) {
		this.anyChildren = anyChildren;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "typicalFolderStructureId" } //0 MySql-TableName: VTfsTree
		,{ data: "tfsName" }                  //1
		,{ data: "level" }                    //2
		,{ data: "perSdFlag" }                //3
		,{ data: "typicalFolderStructureIdParent" } //4
		,{ data: "parentName" }               //5
		,{ data: "parentPerSdFlag" }          //6
		,{ data: "anyChildren" }              //7
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 4]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.perSdFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[3]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.parentPerSdFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[6]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.anyChildren == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[7]
		}

	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "typicalFolderStructureId", name: "TypicalFolderStructureId" } //0 MySql-TableName: VTfsTree
		,{ data: "tfsName", name: "TfsName" }                               //1
		,{ data: "level", name: "Level" }                                   //2
		,{ data: "perSdFlag", name: "PerSdFlag" }                           //3
		,{ data: "typicalFolderStructureIdParent", name: "TypicalFolderStructureIdParent" } //4
		,{ data: "parentName", name: "ParentName" }                         //5
		,{ data: "parentPerSdFlag", name: "ParentPerSdFlag" }               //6
		,{ data: "anyChildren", name: "AnyChildren" }                       //7
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 4]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.perSdFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[3]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.parentPerSdFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[6]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.anyChildren == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[7]
		}


	];







Vir 'n Save Data function sien TfsTree.java






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: VTfsTree										   (js3Str)
		$("#xxxTypicalFolderStructureId").val(data.typicalFolderStructureId); //0
		$("#xxxTfsName").val(data.tfsName);                               //1
		$("#xxxLevel").val(data.level);                                   //2
		$("#xxxPerSdFlag").val(data.perSdFlag);                           //3    use one of these
		$("#xxxPerSdFlag").prop("checked", data.perSdFlag == "Y");        //3    use one of these
		$("#xxxTypicalFolderStructureIdParent").val(data.typicalFolderStructureIdParent); //4
		populateSelect("xxxTypicalFolderStructureIdParent",               //name of html select element that will be populated
				"/rest/ignite/v1/typical-folder-structure/find-all",      //url
				"typicalFolderStructureId",                               //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.typicalFolderStructureIdParent,                      //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxParentName").val(data.parentName);                         //5
		$("#xxxParentPerSdFlag").val(data.parentPerSdFlag);               //6    use one of these
		$("#xxxParentPerSdFlag").prop("checked", data.parentPerSdFlag == "Y"); //6    use one of these
		$("#xxxAnyChildren").val(data.anyChildren);                       //7    use one of these
		$("#xxxAnyChildren").prop("checked", data.anyChildren == "Y");    //7    use one of these






/**  HTML  om 'n grid te populate
												<th>TypicalFolderStructureId</th>    <!--0  MySql-TableName: VTfsTree-->
												<th>Tfs Name</th>                    <!--1  TfsName-->
												<th>Level</th>                       <!--2  Level-->
												<th>Per Sd</th>                      <!--3  PerSdFlag-->
												<th>Typical Folder Structure Id Parent</th> <!--4  TypicalFolderStructureIdParent-->
												<th>Parent Name</th>                 <!--5  ParentName-->
												<th>Parent Per Sd</th>               <!--6  ParentPerSdFlag-->
												<th>Any Children</th>                <!--7  AnyChildren-->

*/