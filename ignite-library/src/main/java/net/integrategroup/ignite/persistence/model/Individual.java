package net.integrategroup.ignite.persistence.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.springframework.stereotype.Component;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import net.integrategroup.ignite.utils.JsonDateSerializer;
import net.integrategroup.ignite.utils.PasswordResetToken;


/*****************************************************Don't overwrite this*******************************/
/*****************************************************Don't overwrite this*******************************/
/*****************************************************Don't overwrite this*******************************/
/*****************************************************Don't overwrite this*******************************/
/*****************************************************Don't overwrite this*******************************/

@Entity
@Table(schema = "ig_db", name = "Individual")
public class Individual implements Serializable {

    private static final long serialVersionUID = 778658205822537195L; /** ID was Generated by Johannes **/

    @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "IndividualId")
	private Long individualId;

	@Column(name = "ParticipantId")
	private Long participantId;

	@Column(name = "FirstName")
	private String firstName;

	@Column(name = "SecondName")
	private String secondName;

	@Column(name = "ThirdName")
	private String thirdName;

	@Column(name = "Nickname")
	private String nickname;

	@Column(name = "LastName")
	private String lastName;

	@Column(name = "Initials")
	private String initials;

	@Column(name = "IdNumber")
	private String idNumber;

	@Column(name = "PassportNumber")
	private String passportNumber;

	@Column(name = "CountryId")
	private Long countryId;

	@Column(name = "IsActiveMember")
	private String isActiveMember;

	@Column(name = "AllowLoginFlag")
	private String allowLoginFlag;

	@Column(name = "IncomeTaxNumber")
	private String incomeTaxNumber;

	@Column(name = "Pass")
	private String pass;

	@Column(name = "UserName")
	private String userName;

	@Column(name = "PasswordResetToken")
	private String passwordResetToken;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "PasswordResetExpiryDate")
	private Date passwordResetExpiryDate;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastLoginTimestamp")
	private Date lastLoginTimestamp;

	@Column(name = "MedicalName")
	private String medicalName;

	@Column(name = "MedicalNumber")
	private String medicalNumber;

	@JsonSerialize(using = JsonDateSerializer.class)
	@Column(name = "LastUpdateTimestamp")
	private Date lastUpdateTimestamp;

	@Column(name = "LastUpdateUserName")
	private String lastUpdateUserName;

	// *******************************************************
		// *******************************************************
		// *******************************************************
		// Tony Login code Start

		public String getDisplayName() {
			String name = "";

			if ((nickname != null) && (!nickname.isEmpty())) {
				name = nickname;
			}
			if ((lastName != null) && (!lastName.isEmpty())) {
				name += " " + lastName;
			}

			// fall back to username if not populated
			if (name.trim().isEmpty()) {
				name = userName;
			}

			return name;
		}

		public void setPasswordResetToken(PasswordResetToken token) {
			this.passwordResetToken = token.getToken();
			this.passwordResetExpiryDate = token.getExpiryDate();
		}

	// ***	public void setPasswordResetExpiryDate(Date passwordResetExpiryDate) {
	// ***	this.passwordResetExpiryDate = passwordResetExpiryDate;
	// ***}

		public void setPasswordReset(String passwordResetToken, Date passwordResetExpiryDate) {
			this.passwordResetToken = passwordResetToken;
			this.passwordResetExpiryDate = passwordResetExpiryDate;
		}

		public void clearPasswordReset() {
			this.passwordResetToken = null;
			this.passwordResetExpiryDate = null;
		}
		// Tony Code End
		// *******************************************************
		// *******************************************************
		// *******************************************************



	public Long getIndividualId() {
		return individualId;
	}

	public void setIndividualId(Long individualId) {
		this.individualId = individualId;
	}

	public Long getParticipantId() {
		return participantId;
	}

	public void setParticipantId(Long participantId) {
		this.participantId = participantId;
	}

/***	public Participant getParticipant() {
		return participant;
	}

	public void setParticipant(Participant participant) {
		this.participant = participant;
	} ***/

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getSecondName() {
		return secondName;
	}

	public void setSecondName(String secondName) {
		this.secondName = secondName;
	}

	public String getThirdName() {
		return thirdName;
	}

	public void setThirdName(String thirdName) {
		this.thirdName = thirdName;
	}

	public String getNickname() {
		return nickname;
	}

	public void setNickname(String nickname) {
		this.nickname = nickname;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getInitials() {
		return initials;
	}

	public void setInitials(String initials) {
		this.initials = initials;
	}

	public String getIdNumber() {
		return idNumber;
	}

	public void setIdNumber(String idNumber) {
		this.idNumber = idNumber;
	}

	public String getPassportNumber() {
		return passportNumber;
	}

	public void setPassportNumber(String passportNumber) {
		this.passportNumber = passportNumber;
	}

	public Long getCountryId() {
		return countryId;
	}

	public void setCountryId(Long countryId) {
		this.countryId = countryId;
	}

/***	public Country getCountry() {
		return country;
	}

	public void setCountry(Country country) {
		this.country = country;
	} ***/

	public String getIsActiveMember() {
		return isActiveMember;
	}

	public void setIsActiveMember(String isActiveMember) {
		this.isActiveMember = isActiveMember;
	}

	public String getAllowLoginFlag() {
		return allowLoginFlag;
	}

	public void setAllowLoginFlag(String allowLoginFlag) {
		this.allowLoginFlag = allowLoginFlag;
	}

	public String getIncomeTaxNumber() {
		return incomeTaxNumber;
	}

	public void setIncomeTaxNumber(String incomeTaxNumber) {
		this.incomeTaxNumber = incomeTaxNumber;
	}

	public String getPass() {
		return pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPasswordResetToken() {
		return passwordResetToken;
	}

	public void setPasswordResetToken(String passwordResetToken) {
		this.passwordResetToken = passwordResetToken;
	}

	public Date getPasswordResetExpiryDate() {
		return passwordResetExpiryDate;
	}

	public void setPasswordResetExpiryDate(Date passwordResetExpiryDate) {
		this.passwordResetExpiryDate = passwordResetExpiryDate;
	}

	public Date getLastLoginTimestamp() {
		return lastLoginTimestamp;
	}

	public void setLastLoginTimestamp(Date lastLoginTimestamp) {
		this.lastLoginTimestamp = lastLoginTimestamp;
	}

	public String getMedicalName() {
		return medicalName;
	}

	public void setMedicalName(String medicalName) {
		this.medicalName = medicalName;
	}

	public String getMedicalNumber() {
		return medicalNumber;
	}

	public void setMedicalNumber(String medicalNumber) {
		this.medicalNumber = medicalNumber;
	}

	public Date getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		this.lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public String getLastUpdateUserName() {
		return lastUpdateUserName;
	}

	public void setLastUpdateUserName(String lastUpdateUserName) {
		this.lastUpdateUserName = lastUpdateUserName;
	}


}

/**  javascript      vir grid population        (jsStr)

	var columnsArray = [
		 { data: "individualId" }             //0 MySql-TableName: Individual
		,{ data: "participantId" }            //1
		,{ data: "firstName" }                //2
		,{ data: "secondName" }               //3
		,{ data: "thirdName" }                //4
		,{ data: "nickname" }                 //5
		,{ data: "lastName" }                 //6
		,{ data: "initials" }                 //7
		,{ data: "idNumber" }                 //8
		,{ data: "passportNumber" }           //9
		,{ data: "countryId" }                //10
		,{ data: "isActiveMember" }           //11
		,{ data: "allowLoginFlag" }           //12
		,{ data: "incomeTaxNumber" }          //13
		,{ data: "pass" }                     //14
		,{ data: "userName" }                 //15
		,{ data: "passwordResetToken" }       //16
		,{ data: "passwordResetExpiryDate" }  //17
		,{ data: "lastLoginTimestamp" }       //18
		,{ data: "medicalName" }              //19
		,{ data: "medicalNumber" }            //20
		,{ data: "lastUpdateTimestamp" }      //21
		,{ data: "lastUpdateUserName" }       //22
	];

	var columnDefsArray = [
		{
			visible: false,
			targets: [0, 1, 10, 22]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [17, 18, 21]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.isActiveMember == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[11]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowLoginFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[12]
		}

	];







/**  javascript      vir grid SelectFromGridDialog        (js1Str)

	var columns = [
		{ data: "individualId", name: "IndividualId" }                     //0 MySql-TableName: Individual
		,{ data: "participantId", name: "ParticipantId" }                   //1
		,{ data: "firstName", name: "FirstName" }                           //2
		,{ data: "secondName", name: "SecondName" }                         //3
		,{ data: "thirdName", name: "ThirdName" }                           //4
		,{ data: "nickname", name: "Nickname" }                             //5
		,{ data: "lastName", name: "LastName" }                             //6
		,{ data: "initials", name: "Initials" }                             //7
		,{ data: "idNumber", name: "IdNumber" }                             //8
		,{ data: "passportNumber", name: "PassportNumber" }                 //9
		,{ data: "countryId", name: "CountryId" }                           //10
		,{ data: "isActiveMember", name: "IsActiveMember" }                 //11
		,{ data: "allowLoginFlag", name: "AllowLoginFlag" }                 //12
		,{ data: "incomeTaxNumber", name: "IncomeTaxNumber" }               //13
		,{ data: "pass", name: "Pass" }                                     //14
		,{ data: "userName", name: "UserName" }                             //15
		,{ data: "passwordResetToken", name: "PasswordResetToken" }         //16
		,{ data: "passwordResetExpiryDate", name: "PasswordResetExpiryDate" } //17
		,{ data: "lastLoginTimestamp", name: "LastLoginTimestamp" }         //18
		,{ data: "medicalName", name: "MedicalName" }                       //19
		,{ data: "medicalNumber", name: "MedicalNumber" }                   //20
		,{ data: "lastUpdateTimestamp", name: "LastUpdateTimestamp" }       //21
		,{ data: "lastUpdateUserName", name: "LastUpdateUserName" }         //22
	];

	var columnDefs = [
		{
			visible: false,
			targets: [0, 1, 10, 22]
		}
		,{       //for Date columns
			render: function (data, type, row) {
				var html = data;
				if (type == "display") {
					html = timestampToString(data, false);
				}
				return html;
			},
			targets: [17, 18, 21]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.isActiveMember == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[11]
		}
		,{        //for checkboxes
			render: function (data, type, row) {
				return "<input type='checkbox' readonly onclick='return false;' " + (row.allowLoginFlag == "Y" ? " checked " : "") + ">";
			},
			className: "dt-center",
			targets:[12]
		}


	];







Vir 'n Save Data function                        (js2Str)


	var postUrl = "/rest/ignite/v1/individual/new";
	var postData = {
		individualId : $("#xxxIndividualId").val()             //0 MySql-TableName: Individual
		,participantId : $("#xxxParticipantId").val()                                //1
		,firstName : $("#xxxFirstName").val()                                        //2
		,secondName : $("#xxxSecondName").val()                                      //3
		,thirdName : $("#xxxThirdName").val()                                        //4
		,nickname : $("#xxxNickname").val()                                          //5
		,lastName : $("#xxxLastName").val()                                          //6
		,initials : $("#xxxInitials").val()                                          //7
		,idNumber : $("#xxxIdNumber").val()                                          //8
		,passportNumber : $("#xxxPassportNumber").val()                              //9
		,countryId : $("#xxxCountryId").val()                                        //10
		,isActiveMember : $("#xxxIsActiveMember").val()                              //11    use one of these
		,isActiveMember : $("#xxxIsActiveMember").is(":checked") ? "Y" : "N"       //11    use one of these
		,allowLoginFlag : $("#xxxAllowLoginFlag").val()                              //12    use one of these
		,allowLoginFlag : $("#xxxAllowLoginFlag").is(":checked") ? "Y" : "N"       //12    use one of these
		,incomeTaxNumber : $("#xxxIncomeTaxNumber").val()                            //13
		,pass : $("#xxxPass").val()                                                  //14
		,userName : $("#xxxUserName").val()                                          //15
		,passwordResetToken : $("#xxxPasswordResetToken").val()                      //16
		,passwordResetExpiryDate : getMsFromDatePicker("xxxPasswordResetExpiryDate") //17
		,lastLoginTimestamp : getMsFromDatePicker("xxxLastLoginTimestamp")           //18
		,medicalName : $("#xxxMedicalName").val()                                    //19
		,medicalNumber : $("#xxxMedicalNumber").val()                                //20
		,lastUpdateTimestamp : getMsFromDatePicker("xxxLastUpdateTimestamp")         //21
	};

	var errors = "";






Vir 'n Populate Data function                                                  (js3Str)

		//  MySql-TableName: Individual										   (js3Str)
		$("#xxxIndividualId").val(data.individualId);                     //0
		$("#xxxParticipantId").val(data.participantId);                   //1
		populateSelect("xxxParticipantId",                                //name of html select element that will be populated
				"/rest/ignite/v1/participant/find-all",                   //url
				"participantId",                                          //the value that must be saved (ReferencedColumnName)
				"systemName",                                             //shown to user (usually a Name column)
				data.participantId,                                       //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxFirstName").val(data.firstName);                           //2
		$("#xxxSecondName").val(data.secondName);                         //3
		$("#xxxThirdName").val(data.thirdName);                           //4
		$("#xxxNickname").val(data.nickname);                             //5
		$("#xxxLastName").val(data.lastName);                             //6
		$("#xxxInitials").val(data.initials);                             //7
		$("#xxxIdNumber").val(data.idNumber);                             //8
		$("#xxxPassportNumber").val(data.passportNumber);                 //9
		$("#xxxCountryId").val(data.countryId);                           //10
		populateSelect("xxxCountryId",                                    //name of html select element that will be populated
				"/rest/ignite/v1/country/find-all",                       //url
				"countryId",                                              //the value that must be saved (ReferencedColumnName)
				"name",                                                   //shown to user (usually a Name column)
				data.countryId,                                           //The selected one, if there is one
				true,                                                     //addEmpty, boolean: should we add empty object at the top
				null                                                      //completeMethod
		);

		$("#xxxIsActiveMember").val(data.isActiveMember);                 //11    use one of these
		$("#xxxIsActiveMember").prop("checked", data.isActiveMember == "Y"); //11    use one of these
		$("#xxxAllowLoginFlag").val(data.allowLoginFlag);                 //12    use one of these
		$("#xxxAllowLoginFlag").prop("checked", data.allowLoginFlag == "Y"); //12    use one of these
		$("#xxxIncomeTaxNumber").val(data.incomeTaxNumber);               //13
		$("#xxxPass").val(data.pass);                                     //14
		$("#xxxUserName").val(data.userName);                             //15
		$("#xxxPasswordResetToken").val(data.passwordResetToken);         //16
		$("#xxxPasswordResetExpiryDate").datepicker("setDate", data.passwordResetExpiryDate == null? timestampToString(new Date(), false) : new Date(data.passwordResetExpiryDate)); //17
		$("#xxxLastLoginTimestamp").datepicker("setDate", data.lastLoginTimestamp == null? timestampToString(new Date(), false) : new Date(data.lastLoginTimestamp));         //18
		$("#xxxMedicalName").val(data.medicalName);                       //19
		$("#xxxMedicalNumber").val(data.medicalNumber);                   //20
		$("#xxxLastUpdateTimestamp").datepicker("setDate", data.lastUpdateTimestamp == null? timestampToString(new Date(), false) : new Date(data.lastUpdateTimestamp));       //21






/**  HTML  om 'n grid te populate
												<th>IndividualId</th>                <!--0  MySql-TableName: Individual-->
												<th>ParticipantId</th>               <!--1  ParticipantId-->
												<th>First Name</th>                  <!--2  FirstName-->
												<th>Second Name</th>                 <!--3  SecondName-->
												<th>Third Name</th>                  <!--4  ThirdName-->
												<th>Nickname</th>                    <!--5  Nickname-->
												<th>Last Name</th>                   <!--6  LastName-->
												<th>Initials</th>                    <!--7  Initials-->
												<th>Id Number</th>                   <!--8  IdNumber-->
												<th>Passport Number</th>             <!--9  PassportNumber-->
												<th>CountryId</th>                   <!--10  CountryId-->
												<th>Is Active Member</th>            <!--11  IsActiveMember-->
												<th>Allow Login</th>                 <!--12  AllowLoginFlag-->
												<th>Income Tax Number</th>           <!--13  IncomeTaxNumber-->
												<th>Pass</th>                        <!--14  Pass-->
												<th>User Name</th>                   <!--15  UserName-->
												<th>Password Reset Token</th>        <!--16  PasswordResetToken-->
												<th>Password Reset Expiry Date</th>  <!--17  PasswordResetExpiryDate-->
												<th>Last Login Timestamp</th>        <!--18  LastLoginTimestamp-->
												<th>Medical Name</th>                <!--19  MedicalName-->
												<th>Medical Number</th>              <!--20  MedicalNumber-->
												<th>Last Update Timestamp</th>       <!--21  LastUpdateTimestamp-->
												<th>LastUpdateUserName</th>          <!--22  LastUpdateUserName-->

*/