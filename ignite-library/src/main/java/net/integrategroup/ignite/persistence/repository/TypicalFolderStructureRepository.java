package net.integrategroup.ignite.persistence.repository;

import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import net.integrategroup.ignite.persistence.model.TypicalFolderStructure;
import net.integrategroup.ignite.persistence.model.VTfsTree;
import net.integrategroup.ignite.persistence.model.VTypicalFolderStructure;


/** @author Generated by Johannes Marais (JohannesSQL v7.7) **/
/** ******* ********* ** 2023-11-01 10:26:07 ******** ***** **/

@Repository
public interface TypicalFolderStructureRepository extends CrudRepository<TypicalFolderStructure, Long> {

	@Override
	List<TypicalFolderStructure> findAll();

	@Query("Select i   FROM  TypicalFolderStructure i    WHERE  i.typicalFolderStructureId = ?1")
	TypicalFolderStructure getByTypicalFolderStructureId(Long typicalFolderStructureId);


//	@Query("Select v   FROM  VTypicalFolderStructure v   WHERE  v.typicalFolderStructureId = ?1")       //One record from View
//	VTypicalFolderStructure getByVTypicalFolderStructureId(Long typicalFolderStructureId);



	@Query("SELECT v FROM VTfsTree v")							//All in Tree view
	List<VTfsTree> findListAllInTreeView();

	@Query("SELECT v FROM VTfsTree v where v.level = '1'")		//Top level in Tree view
	List<VTfsTree> findListTopLevelInTreeView();
	
	@Query("SELECT v FROM VTypicalFolderStructure v")			//All in view
	List<VTypicalFolderStructure> findListAllInView();
	
	
//	@Query("SELECT v FROM VTypicalFolderStructure v WHERE v.columnName = 'XXX'")		//List from View without parameter
//	List<VTypicalFolderStructure> findListVTypicalFolderStructureXXX();

//	@Query("SELECT v FROM VTypicalFolderStructure v WHERE v.columnName = ?1")				//List from View that needs parameter
//	List<VTypicalFolderStructure> findListVTypicalFolderStructureXXX(Long paramName);

//	@Query("SELECT v FROM VTypicalFolderStructure v WHERE v.columnName = ?1 AND v.columnName = ?2 and v.columnName = ?3")	//List from View that needs multiple parameters
//	List<VTypicalFolderStructure> findListVTypicalFolderStructureXXX(Long paramId, String paramName, String paramName2);

//	@Query("SELECT v FROM VTypicalFolderStructure v "									//List from View that needs date parameters
//		" WHERE    v.paramId = ?1 "
//		" AND      v.paramDate  BETWEEN ?2 AND ?3 "
//		" ORDER BY v.paramDate ")
//	List<VTypicalFolderStructure> findListVTypicalFolderStructureXXX(Long paramId, Date fd, Date ld);




	@Query("Select i   FROM  TypicalFolderStructure i    WHERE  i.serviceDisciplineIdIndustry = ?1")
	List<TypicalFolderStructure> findListTypicalFolderStructureForServiceDisciplineIdIndustry(Long serviceDisciplineId);

	@Query("Select i   FROM  TypicalFolderStructure i    WHERE  i.typicalFolderStructureIdParent = ?1")
	List<TypicalFolderStructure> findListTypicalFolderStructureForTypicalFolderStructureIdParent(Long typicalFolderStructureId);


}